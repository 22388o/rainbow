// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package zeta

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ExpireSeries is the `expireSeries` instruction.
type ExpireSeries struct {
	SettlementNonce *uint8

	// [0] = [] state
	//
	// [1] = [WRITE] zetaGroup
	//
	// [2] = [] oracle
	//
	// [3] = [WRITE] settlementAccount
	//
	// [4] = [WRITE, SIGNER] payer
	//
	// [5] = [] systemProgram
	//
	// [6] = [WRITE] greeks
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewExpireSeriesInstructionBuilder creates a new `ExpireSeries` instruction builder.
func NewExpireSeriesInstructionBuilder() *ExpireSeries {
	nd := &ExpireSeries{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetSettlementNonce sets the "settlementNonce" parameter.
func (inst *ExpireSeries) SetSettlementNonce(settlementNonce uint8) *ExpireSeries {
	inst.SettlementNonce = &settlementNonce
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *ExpireSeries) SetStateAccount(state ag_solanago.PublicKey) *ExpireSeries {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *ExpireSeries) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetZetaGroupAccount sets the "zetaGroup" account.
func (inst *ExpireSeries) SetZetaGroupAccount(zetaGroup ag_solanago.PublicKey) *ExpireSeries {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(zetaGroup).WRITE()
	return inst
}

// GetZetaGroupAccount gets the "zetaGroup" account.
func (inst *ExpireSeries) GetZetaGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOracleAccount sets the "oracle" account.
func (inst *ExpireSeries) SetOracleAccount(oracle ag_solanago.PublicKey) *ExpireSeries {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(oracle)
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *ExpireSeries) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSettlementAccountAccount sets the "settlementAccount" account.
func (inst *ExpireSeries) SetSettlementAccountAccount(settlementAccount ag_solanago.PublicKey) *ExpireSeries {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(settlementAccount).WRITE()
	return inst
}

// GetSettlementAccountAccount gets the "settlementAccount" account.
func (inst *ExpireSeries) GetSettlementAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPayerAccount sets the "payer" account.
func (inst *ExpireSeries) SetPayerAccount(payer ag_solanago.PublicKey) *ExpireSeries {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *ExpireSeries) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *ExpireSeries) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ExpireSeries {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *ExpireSeries) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetGreeksAccount sets the "greeks" account.
func (inst *ExpireSeries) SetGreeksAccount(greeks ag_solanago.PublicKey) *ExpireSeries {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(greeks).WRITE()
	return inst
}

// GetGreeksAccount gets the "greeks" account.
func (inst *ExpireSeries) GetGreeksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst ExpireSeries) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ExpireSeries,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ExpireSeries) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ExpireSeries) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.SettlementNonce == nil {
			return errors.New("SettlementNonce parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ZetaGroup is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SettlementAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Greeks is not set")
		}
	}
	return nil
}

func (inst *ExpireSeries) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ExpireSeries")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("SettlementNonce", *inst.SettlementNonce))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("    zetaGroup", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       oracle", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   settlement", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        payer", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("       greeks", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj ExpireSeries) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SettlementNonce` param:
	err = encoder.Encode(obj.SettlementNonce)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ExpireSeries) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SettlementNonce`:
	err = decoder.Decode(&obj.SettlementNonce)
	if err != nil {
		return err
	}
	return nil
}

// NewExpireSeriesInstruction declares a new ExpireSeries instruction with the provided parameters and accounts.
func NewExpireSeriesInstruction(
	// Parameters:
	settlementNonce uint8,
	// Accounts:
	state ag_solanago.PublicKey,
	zetaGroup ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	settlementAccount ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	greeks ag_solanago.PublicKey) *ExpireSeries {
	return NewExpireSeriesInstructionBuilder().
		SetSettlementNonce(settlementNonce).
		SetStateAccount(state).
		SetZetaGroupAccount(zetaGroup).
		SetOracleAccount(oracle).
		SetSettlementAccountAccount(settlementAccount).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram).
		SetGreeksAccount(greeks)
}
