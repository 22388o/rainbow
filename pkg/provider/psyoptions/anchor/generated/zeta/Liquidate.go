// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package zeta

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Liquidate is the `liquidate` instruction.
type Liquidate struct {
	Size *uint32

	// [0] = [] state
	//
	// [1] = [SIGNER] liquidator
	//
	// [2] = [WRITE] liquidatorMarginAccount
	//
	// [3] = [WRITE] greeks
	//
	// [4] = [] oracle
	//
	// [5] = [] market
	//
	// [6] = [] zetaGroup
	//
	// [7] = [WRITE] liquidatedMarginAccount
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewLiquidateInstructionBuilder creates a new `Liquidate` instruction builder.
func NewLiquidateInstructionBuilder() *Liquidate {
	nd := &Liquidate{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetSize sets the "size" parameter.
func (inst *Liquidate) SetSize(size uint32) *Liquidate {
	inst.Size = &size
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *Liquidate) SetStateAccount(state ag_solanago.PublicKey) *Liquidate {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *Liquidate) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetLiquidatorAccount sets the "liquidator" account.
func (inst *Liquidate) SetLiquidatorAccount(liquidator ag_solanago.PublicKey) *Liquidate {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(liquidator).SIGNER()
	return inst
}

// GetLiquidatorAccount gets the "liquidator" account.
func (inst *Liquidate) GetLiquidatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetLiquidatorMarginAccountAccount sets the "liquidatorMarginAccount" account.
func (inst *Liquidate) SetLiquidatorMarginAccountAccount(liquidatorMarginAccount ag_solanago.PublicKey) *Liquidate {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(liquidatorMarginAccount).WRITE()
	return inst
}

// GetLiquidatorMarginAccountAccount gets the "liquidatorMarginAccount" account.
func (inst *Liquidate) GetLiquidatorMarginAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetGreeksAccount sets the "greeks" account.
func (inst *Liquidate) SetGreeksAccount(greeks ag_solanago.PublicKey) *Liquidate {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(greeks).WRITE()
	return inst
}

// GetGreeksAccount gets the "greeks" account.
func (inst *Liquidate) GetGreeksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetOracleAccount sets the "oracle" account.
func (inst *Liquidate) SetOracleAccount(oracle ag_solanago.PublicKey) *Liquidate {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(oracle)
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *Liquidate) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMarketAccount sets the "market" account.
func (inst *Liquidate) SetMarketAccount(market ag_solanago.PublicKey) *Liquidate {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(market)
	return inst
}

// GetMarketAccount gets the "market" account.
func (inst *Liquidate) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetZetaGroupAccount sets the "zetaGroup" account.
func (inst *Liquidate) SetZetaGroupAccount(zetaGroup ag_solanago.PublicKey) *Liquidate {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(zetaGroup)
	return inst
}

// GetZetaGroupAccount gets the "zetaGroup" account.
func (inst *Liquidate) GetZetaGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetLiquidatedMarginAccountAccount sets the "liquidatedMarginAccount" account.
func (inst *Liquidate) SetLiquidatedMarginAccountAccount(liquidatedMarginAccount ag_solanago.PublicKey) *Liquidate {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(liquidatedMarginAccount).WRITE()
	return inst
}

// GetLiquidatedMarginAccountAccount gets the "liquidatedMarginAccount" account.
func (inst *Liquidate) GetLiquidatedMarginAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst Liquidate) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Liquidate,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Liquidate) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Liquidate) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Size == nil {
			return errors.New("Size parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Liquidator is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.LiquidatorMarginAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Greeks is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ZetaGroup is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.LiquidatedMarginAccount is not set")
		}
	}
	return nil
}

func (inst *Liquidate) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Liquidate")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Size", *inst.Size))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      liquidator", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("liquidatorMargin", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          greeks", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          oracle", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("          market", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("       zetaGroup", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("liquidatedMargin", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj Liquidate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Size` param:
	err = encoder.Encode(obj.Size)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Liquidate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Size`:
	err = decoder.Decode(&obj.Size)
	if err != nil {
		return err
	}
	return nil
}

// NewLiquidateInstruction declares a new Liquidate instruction with the provided parameters and accounts.
func NewLiquidateInstruction(
	// Parameters:
	size uint32,
	// Accounts:
	state ag_solanago.PublicKey,
	liquidator ag_solanago.PublicKey,
	liquidatorMarginAccount ag_solanago.PublicKey,
	greeks ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	market ag_solanago.PublicKey,
	zetaGroup ag_solanago.PublicKey,
	liquidatedMarginAccount ag_solanago.PublicKey) *Liquidate {
	return NewLiquidateInstructionBuilder().
		SetSize(size).
		SetStateAccount(state).
		SetLiquidatorAccount(liquidator).
		SetLiquidatorMarginAccountAccount(liquidatorMarginAccount).
		SetGreeksAccount(greeks).
		SetOracleAccount(oracle).
		SetMarketAccount(market).
		SetZetaGroupAccount(zetaGroup).
		SetLiquidatedMarginAccountAccount(liquidatedMarginAccount)
}
