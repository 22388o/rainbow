// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package zeta

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Greeks struct {
	Nonce                             uint8
	MarkPrices                        [46]uint64
	MarkPricesPadding                 [92]uint64
	ProductGreeks                     [22]ProductGreeks
	ProductGreeksPadding              [44]ProductGreeks
	UpdateTimestamp                   [2]uint64
	UpdateTimestampPadding            [4]uint64
	RetreatExpirationTimestamp        [2]uint64
	RetreatExpirationTimestampPadding [4]uint64
	InterestRate                      [2]int64
	InterestRatePadding               [4]int64
	Nodes                             [5]uint64
	Volatility                        [10]uint64
	VolatilityPadding                 [20]uint64
	NodeKeys                          [138]ag_solanago.PublicKey
	HaltForcePricing                  [6]bool
	Padding                           [1641]uint8
}

var GreeksDiscriminator = [8]byte{247, 213, 170, 154, 43, 243, 146, 254}

func (obj Greeks) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(GreeksDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `MarkPrices` param:
	err = encoder.Encode(obj.MarkPrices)
	if err != nil {
		return err
	}
	// Serialize `MarkPricesPadding` param:
	err = encoder.Encode(obj.MarkPricesPadding)
	if err != nil {
		return err
	}
	// Serialize `ProductGreeks` param:
	err = encoder.Encode(obj.ProductGreeks)
	if err != nil {
		return err
	}
	// Serialize `ProductGreeksPadding` param:
	err = encoder.Encode(obj.ProductGreeksPadding)
	if err != nil {
		return err
	}
	// Serialize `UpdateTimestamp` param:
	err = encoder.Encode(obj.UpdateTimestamp)
	if err != nil {
		return err
	}
	// Serialize `UpdateTimestampPadding` param:
	err = encoder.Encode(obj.UpdateTimestampPadding)
	if err != nil {
		return err
	}
	// Serialize `RetreatExpirationTimestamp` param:
	err = encoder.Encode(obj.RetreatExpirationTimestamp)
	if err != nil {
		return err
	}
	// Serialize `RetreatExpirationTimestampPadding` param:
	err = encoder.Encode(obj.RetreatExpirationTimestampPadding)
	if err != nil {
		return err
	}
	// Serialize `InterestRate` param:
	err = encoder.Encode(obj.InterestRate)
	if err != nil {
		return err
	}
	// Serialize `InterestRatePadding` param:
	err = encoder.Encode(obj.InterestRatePadding)
	if err != nil {
		return err
	}
	// Serialize `Nodes` param:
	err = encoder.Encode(obj.Nodes)
	if err != nil {
		return err
	}
	// Serialize `Volatility` param:
	err = encoder.Encode(obj.Volatility)
	if err != nil {
		return err
	}
	// Serialize `VolatilityPadding` param:
	err = encoder.Encode(obj.VolatilityPadding)
	if err != nil {
		return err
	}
	// Serialize `NodeKeys` param:
	err = encoder.Encode(obj.NodeKeys)
	if err != nil {
		return err
	}
	// Serialize `HaltForcePricing` param:
	err = encoder.Encode(obj.HaltForcePricing)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Greeks) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(GreeksDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[247 213 170 154 43 243 146 254]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `MarkPrices`:
	err = decoder.Decode(&obj.MarkPrices)
	if err != nil {
		return err
	}
	// Deserialize `MarkPricesPadding`:
	err = decoder.Decode(&obj.MarkPricesPadding)
	if err != nil {
		return err
	}
	// Deserialize `ProductGreeks`:
	err = decoder.Decode(&obj.ProductGreeks)
	if err != nil {
		return err
	}
	// Deserialize `ProductGreeksPadding`:
	err = decoder.Decode(&obj.ProductGreeksPadding)
	if err != nil {
		return err
	}
	// Deserialize `UpdateTimestamp`:
	err = decoder.Decode(&obj.UpdateTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `UpdateTimestampPadding`:
	err = decoder.Decode(&obj.UpdateTimestampPadding)
	if err != nil {
		return err
	}
	// Deserialize `RetreatExpirationTimestamp`:
	err = decoder.Decode(&obj.RetreatExpirationTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `RetreatExpirationTimestampPadding`:
	err = decoder.Decode(&obj.RetreatExpirationTimestampPadding)
	if err != nil {
		return err
	}
	// Deserialize `InterestRate`:
	err = decoder.Decode(&obj.InterestRate)
	if err != nil {
		return err
	}
	// Deserialize `InterestRatePadding`:
	err = decoder.Decode(&obj.InterestRatePadding)
	if err != nil {
		return err
	}
	// Deserialize `Nodes`:
	err = decoder.Decode(&obj.Nodes)
	if err != nil {
		return err
	}
	// Deserialize `Volatility`:
	err = decoder.Decode(&obj.Volatility)
	if err != nil {
		return err
	}
	// Deserialize `VolatilityPadding`:
	err = decoder.Decode(&obj.VolatilityPadding)
	if err != nil {
		return err
	}
	// Deserialize `NodeKeys`:
	err = decoder.Decode(&obj.NodeKeys)
	if err != nil {
		return err
	}
	// Deserialize `HaltForcePricing`:
	err = decoder.Decode(&obj.HaltForcePricing)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type MarketIndexes struct {
	Nonce       uint8
	Initialized bool
	Indexes     [138]uint8
}

var MarketIndexesDiscriminator = [8]byte{111, 205, 105, 146, 219, 137, 82, 23}

func (obj MarketIndexes) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MarketIndexesDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `Initialized` param:
	err = encoder.Encode(obj.Initialized)
	if err != nil {
		return err
	}
	// Serialize `Indexes` param:
	err = encoder.Encode(obj.Indexes)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MarketIndexes) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MarketIndexesDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[111 205 105 146 219 137 82 23]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `Initialized`:
	err = decoder.Decode(&obj.Initialized)
	if err != nil {
		return err
	}
	// Deserialize `Indexes`:
	err = decoder.Decode(&obj.Indexes)
	if err != nil {
		return err
	}
	return nil
}

type OpenOrdersMap struct {
	UserKey ag_solanago.PublicKey
}

var OpenOrdersMapDiscriminator = [8]byte{250, 126, 172, 10, 118, 30, 3, 168}

func (obj OpenOrdersMap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OpenOrdersMapDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `UserKey` param:
	err = encoder.Encode(obj.UserKey)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OpenOrdersMap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OpenOrdersMapDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[250 126 172 10 118 30 3 168]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `UserKey`:
	err = decoder.Decode(&obj.UserKey)
	if err != nil {
		return err
	}
	return nil
}

type State struct {
	Admin                                  ag_solanago.PublicKey
	StateNonce                             uint8
	SerumNonce                             uint8
	MintAuthNonce                          uint8
	NumUnderlyings                         uint8
	ExpiryIntervalSeconds                  uint32
	NewExpiryThresholdSeconds              uint32
	StrikeInitializationThresholdSeconds   uint32
	PricingFrequencySeconds                uint32
	LiquidatorLiquidationPercentage        uint32
	InsuranceVaultLiquidationPercentage    uint32
	NativeTradeFeePercentage               uint64
	NativeUnderlyingFeePercentage          uint64
	NativeWhitelistUnderlyingFeePercentage uint64
	NativeDepositLimit                     uint64
	ExpirationThresholdSeconds             uint32
	Padding                                [159]uint8
}

var StateDiscriminator = [8]byte{216, 146, 107, 94, 104, 75, 182, 177}

func (obj State) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(StateDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	// Serialize `StateNonce` param:
	err = encoder.Encode(obj.StateNonce)
	if err != nil {
		return err
	}
	// Serialize `SerumNonce` param:
	err = encoder.Encode(obj.SerumNonce)
	if err != nil {
		return err
	}
	// Serialize `MintAuthNonce` param:
	err = encoder.Encode(obj.MintAuthNonce)
	if err != nil {
		return err
	}
	// Serialize `NumUnderlyings` param:
	err = encoder.Encode(obj.NumUnderlyings)
	if err != nil {
		return err
	}
	// Serialize `ExpiryIntervalSeconds` param:
	err = encoder.Encode(obj.ExpiryIntervalSeconds)
	if err != nil {
		return err
	}
	// Serialize `NewExpiryThresholdSeconds` param:
	err = encoder.Encode(obj.NewExpiryThresholdSeconds)
	if err != nil {
		return err
	}
	// Serialize `StrikeInitializationThresholdSeconds` param:
	err = encoder.Encode(obj.StrikeInitializationThresholdSeconds)
	if err != nil {
		return err
	}
	// Serialize `PricingFrequencySeconds` param:
	err = encoder.Encode(obj.PricingFrequencySeconds)
	if err != nil {
		return err
	}
	// Serialize `LiquidatorLiquidationPercentage` param:
	err = encoder.Encode(obj.LiquidatorLiquidationPercentage)
	if err != nil {
		return err
	}
	// Serialize `InsuranceVaultLiquidationPercentage` param:
	err = encoder.Encode(obj.InsuranceVaultLiquidationPercentage)
	if err != nil {
		return err
	}
	// Serialize `NativeTradeFeePercentage` param:
	err = encoder.Encode(obj.NativeTradeFeePercentage)
	if err != nil {
		return err
	}
	// Serialize `NativeUnderlyingFeePercentage` param:
	err = encoder.Encode(obj.NativeUnderlyingFeePercentage)
	if err != nil {
		return err
	}
	// Serialize `NativeWhitelistUnderlyingFeePercentage` param:
	err = encoder.Encode(obj.NativeWhitelistUnderlyingFeePercentage)
	if err != nil {
		return err
	}
	// Serialize `NativeDepositLimit` param:
	err = encoder.Encode(obj.NativeDepositLimit)
	if err != nil {
		return err
	}
	// Serialize `ExpirationThresholdSeconds` param:
	err = encoder.Encode(obj.ExpirationThresholdSeconds)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *State) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(StateDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[216 146 107 94 104 75 182 177]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	// Deserialize `StateNonce`:
	err = decoder.Decode(&obj.StateNonce)
	if err != nil {
		return err
	}
	// Deserialize `SerumNonce`:
	err = decoder.Decode(&obj.SerumNonce)
	if err != nil {
		return err
	}
	// Deserialize `MintAuthNonce`:
	err = decoder.Decode(&obj.MintAuthNonce)
	if err != nil {
		return err
	}
	// Deserialize `NumUnderlyings`:
	err = decoder.Decode(&obj.NumUnderlyings)
	if err != nil {
		return err
	}
	// Deserialize `ExpiryIntervalSeconds`:
	err = decoder.Decode(&obj.ExpiryIntervalSeconds)
	if err != nil {
		return err
	}
	// Deserialize `NewExpiryThresholdSeconds`:
	err = decoder.Decode(&obj.NewExpiryThresholdSeconds)
	if err != nil {
		return err
	}
	// Deserialize `StrikeInitializationThresholdSeconds`:
	err = decoder.Decode(&obj.StrikeInitializationThresholdSeconds)
	if err != nil {
		return err
	}
	// Deserialize `PricingFrequencySeconds`:
	err = decoder.Decode(&obj.PricingFrequencySeconds)
	if err != nil {
		return err
	}
	// Deserialize `LiquidatorLiquidationPercentage`:
	err = decoder.Decode(&obj.LiquidatorLiquidationPercentage)
	if err != nil {
		return err
	}
	// Deserialize `InsuranceVaultLiquidationPercentage`:
	err = decoder.Decode(&obj.InsuranceVaultLiquidationPercentage)
	if err != nil {
		return err
	}
	// Deserialize `NativeTradeFeePercentage`:
	err = decoder.Decode(&obj.NativeTradeFeePercentage)
	if err != nil {
		return err
	}
	// Deserialize `NativeUnderlyingFeePercentage`:
	err = decoder.Decode(&obj.NativeUnderlyingFeePercentage)
	if err != nil {
		return err
	}
	// Deserialize `NativeWhitelistUnderlyingFeePercentage`:
	err = decoder.Decode(&obj.NativeWhitelistUnderlyingFeePercentage)
	if err != nil {
		return err
	}
	// Deserialize `NativeDepositLimit`:
	err = decoder.Decode(&obj.NativeDepositLimit)
	if err != nil {
		return err
	}
	// Deserialize `ExpirationThresholdSeconds`:
	err = decoder.Decode(&obj.ExpirationThresholdSeconds)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type Underlying struct {
	Mint ag_solanago.PublicKey
}

var UnderlyingDiscriminator = [8]byte{206, 128, 152, 77, 112, 164, 13, 2}

func (obj Underlying) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UnderlyingDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Underlying) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UnderlyingDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[206 128 152 77 112 164 13 2]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	return nil
}

type SettlementAccount struct {
	SettlementPrice uint64
	Strikes         [23]uint64
}

var SettlementAccountDiscriminator = [8]byte{81, 42, 104, 111, 123, 89, 146, 180}

func (obj SettlementAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(SettlementAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `SettlementPrice` param:
	err = encoder.Encode(obj.SettlementPrice)
	if err != nil {
		return err
	}
	// Serialize `Strikes` param:
	err = encoder.Encode(obj.Strikes)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SettlementAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(SettlementAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[81 42 104 111 123 89 146 180]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `SettlementPrice`:
	err = decoder.Decode(&obj.SettlementPrice)
	if err != nil {
		return err
	}
	// Deserialize `Strikes`:
	err = decoder.Decode(&obj.Strikes)
	if err != nil {
		return err
	}
	return nil
}

type ZetaGroup struct {
	Nonce                       uint8
	VaultNonce                  uint8
	InsuranceVaultNonce         uint8
	FrontExpiryIndex            uint8
	HaltState                   HaltState
	UnderlyingMint              ag_solanago.PublicKey
	Oracle                      ag_solanago.PublicKey
	Greeks                      ag_solanago.PublicKey
	PricingParameters           PricingParameters
	MarginParameters            MarginParameters
	Products                    [46]Product
	ProductsPadding             [92]Product
	ExpirySeries                [2]ExpirySeries
	ExpirySeriesPadding         [4]ExpirySeries
	TotalInsuranceVaultDeposits uint64
	Padding                     [1063]uint8
}

var ZetaGroupDiscriminator = [8]byte{121, 17, 210, 107, 109, 235, 14, 12}

func (obj ZetaGroup) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ZetaGroupDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `VaultNonce` param:
	err = encoder.Encode(obj.VaultNonce)
	if err != nil {
		return err
	}
	// Serialize `InsuranceVaultNonce` param:
	err = encoder.Encode(obj.InsuranceVaultNonce)
	if err != nil {
		return err
	}
	// Serialize `FrontExpiryIndex` param:
	err = encoder.Encode(obj.FrontExpiryIndex)
	if err != nil {
		return err
	}
	// Serialize `HaltState` param:
	err = encoder.Encode(obj.HaltState)
	if err != nil {
		return err
	}
	// Serialize `UnderlyingMint` param:
	err = encoder.Encode(obj.UnderlyingMint)
	if err != nil {
		return err
	}
	// Serialize `Oracle` param:
	err = encoder.Encode(obj.Oracle)
	if err != nil {
		return err
	}
	// Serialize `Greeks` param:
	err = encoder.Encode(obj.Greeks)
	if err != nil {
		return err
	}
	// Serialize `PricingParameters` param:
	err = encoder.Encode(obj.PricingParameters)
	if err != nil {
		return err
	}
	// Serialize `MarginParameters` param:
	err = encoder.Encode(obj.MarginParameters)
	if err != nil {
		return err
	}
	// Serialize `Products` param:
	err = encoder.Encode(obj.Products)
	if err != nil {
		return err
	}
	// Serialize `ProductsPadding` param:
	err = encoder.Encode(obj.ProductsPadding)
	if err != nil {
		return err
	}
	// Serialize `ExpirySeries` param:
	err = encoder.Encode(obj.ExpirySeries)
	if err != nil {
		return err
	}
	// Serialize `ExpirySeriesPadding` param:
	err = encoder.Encode(obj.ExpirySeriesPadding)
	if err != nil {
		return err
	}
	// Serialize `TotalInsuranceVaultDeposits` param:
	err = encoder.Encode(obj.TotalInsuranceVaultDeposits)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ZetaGroup) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ZetaGroupDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[121 17 210 107 109 235 14 12]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `VaultNonce`:
	err = decoder.Decode(&obj.VaultNonce)
	if err != nil {
		return err
	}
	// Deserialize `InsuranceVaultNonce`:
	err = decoder.Decode(&obj.InsuranceVaultNonce)
	if err != nil {
		return err
	}
	// Deserialize `FrontExpiryIndex`:
	err = decoder.Decode(&obj.FrontExpiryIndex)
	if err != nil {
		return err
	}
	// Deserialize `HaltState`:
	err = decoder.Decode(&obj.HaltState)
	if err != nil {
		return err
	}
	// Deserialize `UnderlyingMint`:
	err = decoder.Decode(&obj.UnderlyingMint)
	if err != nil {
		return err
	}
	// Deserialize `Oracle`:
	err = decoder.Decode(&obj.Oracle)
	if err != nil {
		return err
	}
	// Deserialize `Greeks`:
	err = decoder.Decode(&obj.Greeks)
	if err != nil {
		return err
	}
	// Deserialize `PricingParameters`:
	err = decoder.Decode(&obj.PricingParameters)
	if err != nil {
		return err
	}
	// Deserialize `MarginParameters`:
	err = decoder.Decode(&obj.MarginParameters)
	if err != nil {
		return err
	}
	// Deserialize `Products`:
	err = decoder.Decode(&obj.Products)
	if err != nil {
		return err
	}
	// Deserialize `ProductsPadding`:
	err = decoder.Decode(&obj.ProductsPadding)
	if err != nil {
		return err
	}
	// Deserialize `ExpirySeries`:
	err = decoder.Decode(&obj.ExpirySeries)
	if err != nil {
		return err
	}
	// Deserialize `ExpirySeriesPadding`:
	err = decoder.Decode(&obj.ExpirySeriesPadding)
	if err != nil {
		return err
	}
	// Deserialize `TotalInsuranceVaultDeposits`:
	err = decoder.Decode(&obj.TotalInsuranceVaultDeposits)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type MarketNode struct {
	Index          uint8
	Nonce          uint8
	NodeUpdates    [5]int64
	InterestUpdate int64
}

var MarketNodeDiscriminator = [8]byte{28, 82, 21, 59, 150, 141, 60, 124}

func (obj MarketNode) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MarketNodeDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `NodeUpdates` param:
	err = encoder.Encode(obj.NodeUpdates)
	if err != nil {
		return err
	}
	// Serialize `InterestUpdate` param:
	err = encoder.Encode(obj.InterestUpdate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MarketNode) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MarketNodeDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[28 82 21 59 150 141 60 124]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `NodeUpdates`:
	err = decoder.Decode(&obj.NodeUpdates)
	if err != nil {
		return err
	}
	// Deserialize `InterestUpdate`:
	err = decoder.Decode(&obj.InterestUpdate)
	if err != nil {
		return err
	}
	return nil
}

type MarginAccount struct {
	Authority        ag_solanago.PublicKey
	Nonce            uint8
	Balance          uint64
	ForceCancelFlag  bool
	OpenOrdersNonce  [138]uint8
	SeriesExpiry     [6]uint64
	Positions        [46]Position
	PositionsPadding [92]Position
	RebalanceAmount  int64
	Padding          [388]uint8
}

var MarginAccountDiscriminator = [8]byte{133, 220, 173, 213, 179, 211, 43, 238}

func (obj MarginAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MarginAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `Balance` param:
	err = encoder.Encode(obj.Balance)
	if err != nil {
		return err
	}
	// Serialize `ForceCancelFlag` param:
	err = encoder.Encode(obj.ForceCancelFlag)
	if err != nil {
		return err
	}
	// Serialize `OpenOrdersNonce` param:
	err = encoder.Encode(obj.OpenOrdersNonce)
	if err != nil {
		return err
	}
	// Serialize `SeriesExpiry` param:
	err = encoder.Encode(obj.SeriesExpiry)
	if err != nil {
		return err
	}
	// Serialize `Positions` param:
	err = encoder.Encode(obj.Positions)
	if err != nil {
		return err
	}
	// Serialize `PositionsPadding` param:
	err = encoder.Encode(obj.PositionsPadding)
	if err != nil {
		return err
	}
	// Serialize `RebalanceAmount` param:
	err = encoder.Encode(obj.RebalanceAmount)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MarginAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MarginAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[133 220 173 213 179 211 43 238]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `Balance`:
	err = decoder.Decode(&obj.Balance)
	if err != nil {
		return err
	}
	// Deserialize `ForceCancelFlag`:
	err = decoder.Decode(&obj.ForceCancelFlag)
	if err != nil {
		return err
	}
	// Deserialize `OpenOrdersNonce`:
	err = decoder.Decode(&obj.OpenOrdersNonce)
	if err != nil {
		return err
	}
	// Deserialize `SeriesExpiry`:
	err = decoder.Decode(&obj.SeriesExpiry)
	if err != nil {
		return err
	}
	// Deserialize `Positions`:
	err = decoder.Decode(&obj.Positions)
	if err != nil {
		return err
	}
	// Deserialize `PositionsPadding`:
	err = decoder.Decode(&obj.PositionsPadding)
	if err != nil {
		return err
	}
	// Deserialize `RebalanceAmount`:
	err = decoder.Decode(&obj.RebalanceAmount)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type SocializedLossAccount struct {
	Nonce              uint8
	OverbankruptAmount uint64
}

var SocializedLossAccountDiscriminator = [8]byte{65, 254, 141, 235, 60, 84, 104, 137}

func (obj SocializedLossAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(SocializedLossAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `OverbankruptAmount` param:
	err = encoder.Encode(obj.OverbankruptAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SocializedLossAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(SocializedLossAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[65 254 141 235 60 84 104 137]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `OverbankruptAmount`:
	err = decoder.Decode(&obj.OverbankruptAmount)
	if err != nil {
		return err
	}
	return nil
}

type WhitelistDepositAccount struct {
	Nonce   uint8
	UserKey ag_solanago.PublicKey
}

var WhitelistDepositAccountDiscriminator = [8]byte{110, 2, 217, 81, 68, 174, 120, 217}

func (obj WhitelistDepositAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(WhitelistDepositAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `UserKey` param:
	err = encoder.Encode(obj.UserKey)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WhitelistDepositAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(WhitelistDepositAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[110 2 217 81 68 174 120 217]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `UserKey`:
	err = decoder.Decode(&obj.UserKey)
	if err != nil {
		return err
	}
	return nil
}

type WhitelistInsuranceAccount struct {
	Nonce   uint8
	UserKey ag_solanago.PublicKey
}

var WhitelistInsuranceAccountDiscriminator = [8]byte{10, 104, 192, 203, 129, 60, 40, 2}

func (obj WhitelistInsuranceAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(WhitelistInsuranceAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `UserKey` param:
	err = encoder.Encode(obj.UserKey)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WhitelistInsuranceAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(WhitelistInsuranceAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[10 104 192 203 129 60 40 2]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `UserKey`:
	err = decoder.Decode(&obj.UserKey)
	if err != nil {
		return err
	}
	return nil
}

type InsuranceDepositAccount struct {
	Nonce  uint8
	Amount uint64
}

var InsuranceDepositAccountDiscriminator = [8]byte{182, 161, 252, 101, 123, 161, 205, 184}

func (obj InsuranceDepositAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(InsuranceDepositAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InsuranceDepositAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(InsuranceDepositAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[182 161 252 101 123 161 205 184]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type WhitelistTradingFeesAccount struct {
	Nonce   uint8
	UserKey ag_solanago.PublicKey
}

var WhitelistTradingFeesAccountDiscriminator = [8]byte{219, 39, 189, 166, 137, 243, 84, 239}

func (obj WhitelistTradingFeesAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(WhitelistTradingFeesAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `UserKey` param:
	err = encoder.Encode(obj.UserKey)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WhitelistTradingFeesAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(WhitelistTradingFeesAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[219 39 189 166 137 243 84 239]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `UserKey`:
	err = decoder.Decode(&obj.UserKey)
	if err != nil {
		return err
	}
	return nil
}
