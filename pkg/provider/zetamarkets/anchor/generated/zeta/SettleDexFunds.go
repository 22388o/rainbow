// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package zeta

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SettleDexFunds is the `settleDexFunds` instruction.
type SettleDexFunds struct {

	// [0] = [] state
	//
	// [1] = [WRITE] market
	//
	// [2] = [WRITE] zetaBaseVault
	//
	// [3] = [WRITE] zetaQuoteVault
	//
	// [4] = [WRITE] dexBaseVault
	//
	// [5] = [WRITE] dexQuoteVault
	//
	// [6] = [] vaultOwner
	//
	// [7] = [] mintAuthority
	//
	// [8] = [] serumAuthority
	//
	// [9] = [] dexProgram
	//
	// [10] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSettleDexFundsInstructionBuilder creates a new `SettleDexFunds` instruction builder.
func NewSettleDexFundsInstructionBuilder() *SettleDexFunds {
	nd := &SettleDexFunds{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	return nd
}

// SetStateAccount sets the "state" account.
func (inst *SettleDexFunds) SetStateAccount(state ag_solanago.PublicKey) *SettleDexFunds {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *SettleDexFunds) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMarketAccount sets the "market" account.
func (inst *SettleDexFunds) SetMarketAccount(market ag_solanago.PublicKey) *SettleDexFunds {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(market).WRITE()
	return inst
}

// GetMarketAccount gets the "market" account.
func (inst *SettleDexFunds) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetZetaBaseVaultAccount sets the "zetaBaseVault" account.
func (inst *SettleDexFunds) SetZetaBaseVaultAccount(zetaBaseVault ag_solanago.PublicKey) *SettleDexFunds {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(zetaBaseVault).WRITE()
	return inst
}

// GetZetaBaseVaultAccount gets the "zetaBaseVault" account.
func (inst *SettleDexFunds) GetZetaBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetZetaQuoteVaultAccount sets the "zetaQuoteVault" account.
func (inst *SettleDexFunds) SetZetaQuoteVaultAccount(zetaQuoteVault ag_solanago.PublicKey) *SettleDexFunds {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(zetaQuoteVault).WRITE()
	return inst
}

// GetZetaQuoteVaultAccount gets the "zetaQuoteVault" account.
func (inst *SettleDexFunds) GetZetaQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetDexBaseVaultAccount sets the "dexBaseVault" account.
func (inst *SettleDexFunds) SetDexBaseVaultAccount(dexBaseVault ag_solanago.PublicKey) *SettleDexFunds {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(dexBaseVault).WRITE()
	return inst
}

// GetDexBaseVaultAccount gets the "dexBaseVault" account.
func (inst *SettleDexFunds) GetDexBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetDexQuoteVaultAccount sets the "dexQuoteVault" account.
func (inst *SettleDexFunds) SetDexQuoteVaultAccount(dexQuoteVault ag_solanago.PublicKey) *SettleDexFunds {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(dexQuoteVault).WRITE()
	return inst
}

// GetDexQuoteVaultAccount gets the "dexQuoteVault" account.
func (inst *SettleDexFunds) GetDexQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetVaultOwnerAccount sets the "vaultOwner" account.
func (inst *SettleDexFunds) SetVaultOwnerAccount(vaultOwner ag_solanago.PublicKey) *SettleDexFunds {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(vaultOwner)
	return inst
}

// GetVaultOwnerAccount gets the "vaultOwner" account.
func (inst *SettleDexFunds) GetVaultOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetMintAuthorityAccount sets the "mintAuthority" account.
func (inst *SettleDexFunds) SetMintAuthorityAccount(mintAuthority ag_solanago.PublicKey) *SettleDexFunds {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(mintAuthority)
	return inst
}

// GetMintAuthorityAccount gets the "mintAuthority" account.
func (inst *SettleDexFunds) GetMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSerumAuthorityAccount sets the "serumAuthority" account.
func (inst *SettleDexFunds) SetSerumAuthorityAccount(serumAuthority ag_solanago.PublicKey) *SettleDexFunds {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(serumAuthority)
	return inst
}

// GetSerumAuthorityAccount gets the "serumAuthority" account.
func (inst *SettleDexFunds) GetSerumAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetDexProgramAccount sets the "dexProgram" account.
func (inst *SettleDexFunds) SetDexProgramAccount(dexProgram ag_solanago.PublicKey) *SettleDexFunds {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(dexProgram)
	return inst
}

// GetDexProgramAccount gets the "dexProgram" account.
func (inst *SettleDexFunds) GetDexProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *SettleDexFunds) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *SettleDexFunds {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *SettleDexFunds) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst SettleDexFunds) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SettleDexFunds,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SettleDexFunds) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SettleDexFunds) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ZetaBaseVault is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ZetaQuoteVault is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.DexBaseVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.DexQuoteVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.VaultOwner is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.MintAuthority is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SerumAuthority is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.DexProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *SettleDexFunds) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SettleDexFunds")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        market", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" zetaBaseVault", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("zetaQuoteVault", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  dexBaseVault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta(" dexQuoteVault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    vaultOwner", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta(" mintAuthority", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("serumAuthority", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("    dexProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("  tokenProgram", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj SettleDexFunds) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *SettleDexFunds) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewSettleDexFundsInstruction declares a new SettleDexFunds instruction with the provided parameters and accounts.
func NewSettleDexFundsInstruction(
	// Accounts:
	state ag_solanago.PublicKey,
	market ag_solanago.PublicKey,
	zetaBaseVault ag_solanago.PublicKey,
	zetaQuoteVault ag_solanago.PublicKey,
	dexBaseVault ag_solanago.PublicKey,
	dexQuoteVault ag_solanago.PublicKey,
	vaultOwner ag_solanago.PublicKey,
	mintAuthority ag_solanago.PublicKey,
	serumAuthority ag_solanago.PublicKey,
	dexProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *SettleDexFunds {
	return NewSettleDexFundsInstructionBuilder().
		SetStateAccount(state).
		SetMarketAccount(market).
		SetZetaBaseVaultAccount(zetaBaseVault).
		SetZetaQuoteVaultAccount(zetaQuoteVault).
		SetDexBaseVaultAccount(dexBaseVault).
		SetDexQuoteVaultAccount(dexQuoteVault).
		SetVaultOwnerAccount(vaultOwner).
		SetMintAuthorityAccount(mintAuthority).
		SetSerumAuthorityAccount(serumAuthority).
		SetDexProgramAccount(dexProgram).
		SetTokenProgramAccount(tokenProgram)
}
