// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package zeta

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CleanMarketNodes is the `cleanMarketNodes` instruction.
type CleanMarketNodes struct {
	ExpiryIndex *uint8

	// [0] = [WRITE] zetaGroup
	//
	// [1] = [WRITE] greeks
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCleanMarketNodesInstructionBuilder creates a new `CleanMarketNodes` instruction builder.
func NewCleanMarketNodesInstructionBuilder() *CleanMarketNodes {
	nd := &CleanMarketNodes{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetExpiryIndex sets the "expiryIndex" parameter.
func (inst *CleanMarketNodes) SetExpiryIndex(expiryIndex uint8) *CleanMarketNodes {
	inst.ExpiryIndex = &expiryIndex
	return inst
}

// SetZetaGroupAccount sets the "zetaGroup" account.
func (inst *CleanMarketNodes) SetZetaGroupAccount(zetaGroup ag_solanago.PublicKey) *CleanMarketNodes {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(zetaGroup).WRITE()
	return inst
}

// GetZetaGroupAccount gets the "zetaGroup" account.
func (inst *CleanMarketNodes) GetZetaGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetGreeksAccount sets the "greeks" account.
func (inst *CleanMarketNodes) SetGreeksAccount(greeks ag_solanago.PublicKey) *CleanMarketNodes {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(greeks).WRITE()
	return inst
}

// GetGreeksAccount gets the "greeks" account.
func (inst *CleanMarketNodes) GetGreeksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst CleanMarketNodes) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CleanMarketNodes,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CleanMarketNodes) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CleanMarketNodes) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ExpiryIndex == nil {
			return errors.New("ExpiryIndex parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.ZetaGroup is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Greeks is not set")
		}
	}
	return nil
}

func (inst *CleanMarketNodes) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CleanMarketNodes")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("ExpiryIndex", *inst.ExpiryIndex))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("zetaGroup", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("   greeks", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj CleanMarketNodes) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ExpiryIndex` param:
	err = encoder.Encode(obj.ExpiryIndex)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CleanMarketNodes) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ExpiryIndex`:
	err = decoder.Decode(&obj.ExpiryIndex)
	if err != nil {
		return err
	}
	return nil
}

// NewCleanMarketNodesInstruction declares a new CleanMarketNodes instruction with the provided parameters and accounts.
func NewCleanMarketNodesInstruction(
	// Parameters:
	expiryIndex uint8,
	// Accounts:
	zetaGroup ag_solanago.PublicKey,
	greeks ag_solanago.PublicKey) *CleanMarketNodes {
	return NewCleanMarketNodesInstructionBuilder().
		SetExpiryIndex(expiryIndex).
		SetZetaGroupAccount(zetaGroup).
		SetGreeksAccount(greeks)
}
