// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package zeta

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CrankEventQueue is the `crankEventQueue` instruction.
type CrankEventQueue struct {

	// [0] = [] state
	//
	// [1] = [] zetaGroup
	//
	// [2] = [WRITE] market
	//
	// [3] = [WRITE] eventQueue
	//
	// [4] = [] dexProgram
	//
	// [5] = [] serumAuthority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCrankEventQueueInstructionBuilder creates a new `CrankEventQueue` instruction builder.
func NewCrankEventQueueInstructionBuilder() *CrankEventQueue {
	nd := &CrankEventQueue{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetStateAccount sets the "state" account.
func (inst *CrankEventQueue) SetStateAccount(state ag_solanago.PublicKey) *CrankEventQueue {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *CrankEventQueue) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetZetaGroupAccount sets the "zetaGroup" account.
func (inst *CrankEventQueue) SetZetaGroupAccount(zetaGroup ag_solanago.PublicKey) *CrankEventQueue {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(zetaGroup)
	return inst
}

// GetZetaGroupAccount gets the "zetaGroup" account.
func (inst *CrankEventQueue) GetZetaGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMarketAccount sets the "market" account.
func (inst *CrankEventQueue) SetMarketAccount(market ag_solanago.PublicKey) *CrankEventQueue {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(market).WRITE()
	return inst
}

// GetMarketAccount gets the "market" account.
func (inst *CrankEventQueue) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetEventQueueAccount sets the "eventQueue" account.
func (inst *CrankEventQueue) SetEventQueueAccount(eventQueue ag_solanago.PublicKey) *CrankEventQueue {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(eventQueue).WRITE()
	return inst
}

// GetEventQueueAccount gets the "eventQueue" account.
func (inst *CrankEventQueue) GetEventQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetDexProgramAccount sets the "dexProgram" account.
func (inst *CrankEventQueue) SetDexProgramAccount(dexProgram ag_solanago.PublicKey) *CrankEventQueue {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(dexProgram)
	return inst
}

// GetDexProgramAccount gets the "dexProgram" account.
func (inst *CrankEventQueue) GetDexProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSerumAuthorityAccount sets the "serumAuthority" account.
func (inst *CrankEventQueue) SetSerumAuthorityAccount(serumAuthority ag_solanago.PublicKey) *CrankEventQueue {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(serumAuthority)
	return inst
}

// GetSerumAuthorityAccount gets the "serumAuthority" account.
func (inst *CrankEventQueue) GetSerumAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst CrankEventQueue) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CrankEventQueue,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CrankEventQueue) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CrankEventQueue) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ZetaGroup is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.EventQueue is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.DexProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SerumAuthority is not set")
		}
	}
	return nil
}

func (inst *CrankEventQueue) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CrankEventQueue")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     zetaGroup", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        market", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    eventQueue", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("    dexProgram", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("serumAuthority", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj CrankEventQueue) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CrankEventQueue) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCrankEventQueueInstruction declares a new CrankEventQueue instruction with the provided parameters and accounts.
func NewCrankEventQueueInstruction(
	// Accounts:
	state ag_solanago.PublicKey,
	zetaGroup ag_solanago.PublicKey,
	market ag_solanago.PublicKey,
	eventQueue ag_solanago.PublicKey,
	dexProgram ag_solanago.PublicKey,
	serumAuthority ag_solanago.PublicKey) *CrankEventQueue {
	return NewCrankEventQueueInstructionBuilder().
		SetStateAccount(state).
		SetZetaGroupAccount(zetaGroup).
		SetMarketAccount(market).
		SetEventQueueAccount(eventQueue).
		SetDexProgramAccount(dexProgram).
		SetSerumAuthorityAccount(serumAuthority)
}
