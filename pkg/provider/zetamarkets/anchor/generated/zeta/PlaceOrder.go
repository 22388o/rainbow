// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package zeta

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// PlaceOrder is the `placeOrder` instruction.
type PlaceOrder struct {
	Price         *uint64
	Size          *uint64
	Side          *Side
	ClientOrderId *uint64 `bin:"optional"`

	// [0] = [] state
	//
	// [1] = [] zetaGroup
	//
	// [2] = [WRITE] marginAccount
	//
	// [3] = [SIGNER] authority
	//
	// [4] = [] dexProgram
	//
	// [5] = [] tokenProgram
	//
	// [6] = [] serumAuthority
	//
	// [7] = [WRITE] greeks
	//
	// [8] = [WRITE] openOrders
	//
	// [9] = [] rent
	//
	// ····· marketAccounts: [10] = [WRITE] market
	//
	// ····················· [11] = [WRITE] requestQueue
	//
	// ····················· [12] = [WRITE] eventQueue
	//
	// ····················· [13] = [WRITE] bids
	//
	// ····················· [14] = [WRITE] asks
	//
	// ····················· [15] = [WRITE] orderPayerTokenAccount
	//
	// ····················· [16] = [WRITE] coinVault
	//
	// ····················· [17] = [WRITE] pcVault
	//
	// ····················· [18] = [WRITE] coinWallet
	//
	// ····················· [19] = [WRITE] pcWallet
	//
	// [20] = [] oracle
	//
	// [21] = [WRITE] marketNode
	//
	// [22] = [WRITE] marketMint
	//
	// [23] = [] mintAuthority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewPlaceOrderInstructionBuilder creates a new `PlaceOrder` instruction builder.
func NewPlaceOrderInstructionBuilder() *PlaceOrder {
	nd := &PlaceOrder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 24),
	}
	return nd
}

// SetPrice sets the "price" parameter.
func (inst *PlaceOrder) SetPrice(price uint64) *PlaceOrder {
	inst.Price = &price
	return inst
}

// SetSize sets the "size" parameter.
func (inst *PlaceOrder) SetSize(size uint64) *PlaceOrder {
	inst.Size = &size
	return inst
}

// SetSide sets the "side" parameter.
func (inst *PlaceOrder) SetSide(side Side) *PlaceOrder {
	inst.Side = &side
	return inst
}

// SetClientOrderId sets the "clientOrderId" parameter.
func (inst *PlaceOrder) SetClientOrderId(clientOrderId uint64) *PlaceOrder {
	inst.ClientOrderId = &clientOrderId
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *PlaceOrder) SetStateAccount(state ag_solanago.PublicKey) *PlaceOrder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *PlaceOrder) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetZetaGroupAccount sets the "zetaGroup" account.
func (inst *PlaceOrder) SetZetaGroupAccount(zetaGroup ag_solanago.PublicKey) *PlaceOrder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(zetaGroup)
	return inst
}

// GetZetaGroupAccount gets the "zetaGroup" account.
func (inst *PlaceOrder) GetZetaGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMarginAccountAccount sets the "marginAccount" account.
func (inst *PlaceOrder) SetMarginAccountAccount(marginAccount ag_solanago.PublicKey) *PlaceOrder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(marginAccount).WRITE()
	return inst
}

// GetMarginAccountAccount gets the "marginAccount" account.
func (inst *PlaceOrder) GetMarginAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *PlaceOrder) SetAuthorityAccount(authority ag_solanago.PublicKey) *PlaceOrder {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *PlaceOrder) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetDexProgramAccount sets the "dexProgram" account.
func (inst *PlaceOrder) SetDexProgramAccount(dexProgram ag_solanago.PublicKey) *PlaceOrder {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(dexProgram)
	return inst
}

// GetDexProgramAccount gets the "dexProgram" account.
func (inst *PlaceOrder) GetDexProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *PlaceOrder) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *PlaceOrder {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *PlaceOrder) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSerumAuthorityAccount sets the "serumAuthority" account.
func (inst *PlaceOrder) SetSerumAuthorityAccount(serumAuthority ag_solanago.PublicKey) *PlaceOrder {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(serumAuthority)
	return inst
}

// GetSerumAuthorityAccount gets the "serumAuthority" account.
func (inst *PlaceOrder) GetSerumAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetGreeksAccount sets the "greeks" account.
func (inst *PlaceOrder) SetGreeksAccount(greeks ag_solanago.PublicKey) *PlaceOrder {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(greeks).WRITE()
	return inst
}

// GetGreeksAccount gets the "greeks" account.
func (inst *PlaceOrder) GetGreeksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetOpenOrdersAccount sets the "openOrders" account.
func (inst *PlaceOrder) SetOpenOrdersAccount(openOrders ag_solanago.PublicKey) *PlaceOrder {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(openOrders).WRITE()
	return inst
}

// GetOpenOrdersAccount gets the "openOrders" account.
func (inst *PlaceOrder) GetOpenOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetRentAccount sets the "rent" account.
func (inst *PlaceOrder) SetRentAccount(rent ag_solanago.PublicKey) *PlaceOrder {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *PlaceOrder) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

type PlaceOrderMarketAccountsAccountsBuilder struct {
	ag_solanago.AccountMetaSlice `bin:"-"`
}

func NewPlaceOrderMarketAccountsAccountsBuilder() *PlaceOrderMarketAccountsAccountsBuilder {
	return &PlaceOrderMarketAccountsAccountsBuilder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
}

func (inst *PlaceOrder) SetMarketAccountsAccountsFromBuilder(placeOrderMarketAccountsAccountsBuilder *PlaceOrderMarketAccountsAccountsBuilder) *PlaceOrder {
	inst.AccountMetaSlice[10] = placeOrderMarketAccountsAccountsBuilder.GetMarketAccount()
	inst.AccountMetaSlice[11] = placeOrderMarketAccountsAccountsBuilder.GetRequestQueueAccount()
	inst.AccountMetaSlice[12] = placeOrderMarketAccountsAccountsBuilder.GetEventQueueAccount()
	inst.AccountMetaSlice[13] = placeOrderMarketAccountsAccountsBuilder.GetBidsAccount()
	inst.AccountMetaSlice[14] = placeOrderMarketAccountsAccountsBuilder.GetAsksAccount()
	inst.AccountMetaSlice[15] = placeOrderMarketAccountsAccountsBuilder.GetOrderPayerTokenAccountAccount()
	inst.AccountMetaSlice[16] = placeOrderMarketAccountsAccountsBuilder.GetCoinVaultAccount()
	inst.AccountMetaSlice[17] = placeOrderMarketAccountsAccountsBuilder.GetPcVaultAccount()
	inst.AccountMetaSlice[18] = placeOrderMarketAccountsAccountsBuilder.GetCoinWalletAccount()
	inst.AccountMetaSlice[19] = placeOrderMarketAccountsAccountsBuilder.GetPcWalletAccount()
	return inst
}

// SetMarketAccount sets the "market" account.
func (inst *PlaceOrderMarketAccountsAccountsBuilder) SetMarketAccount(market ag_solanago.PublicKey) *PlaceOrderMarketAccountsAccountsBuilder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(market).WRITE()
	return inst
}

// GetMarketAccount gets the "market" account.
func (inst *PlaceOrderMarketAccountsAccountsBuilder) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetRequestQueueAccount sets the "requestQueue" account.
func (inst *PlaceOrderMarketAccountsAccountsBuilder) SetRequestQueueAccount(requestQueue ag_solanago.PublicKey) *PlaceOrderMarketAccountsAccountsBuilder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(requestQueue).WRITE()
	return inst
}

// GetRequestQueueAccount gets the "requestQueue" account.
func (inst *PlaceOrderMarketAccountsAccountsBuilder) GetRequestQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetEventQueueAccount sets the "eventQueue" account.
func (inst *PlaceOrderMarketAccountsAccountsBuilder) SetEventQueueAccount(eventQueue ag_solanago.PublicKey) *PlaceOrderMarketAccountsAccountsBuilder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(eventQueue).WRITE()
	return inst
}

// GetEventQueueAccount gets the "eventQueue" account.
func (inst *PlaceOrderMarketAccountsAccountsBuilder) GetEventQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBidsAccount sets the "bids" account.
func (inst *PlaceOrderMarketAccountsAccountsBuilder) SetBidsAccount(bids ag_solanago.PublicKey) *PlaceOrderMarketAccountsAccountsBuilder {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(bids).WRITE()
	return inst
}

// GetBidsAccount gets the "bids" account.
func (inst *PlaceOrderMarketAccountsAccountsBuilder) GetBidsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAsksAccount sets the "asks" account.
func (inst *PlaceOrderMarketAccountsAccountsBuilder) SetAsksAccount(asks ag_solanago.PublicKey) *PlaceOrderMarketAccountsAccountsBuilder {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(asks).WRITE()
	return inst
}

// GetAsksAccount gets the "asks" account.
func (inst *PlaceOrderMarketAccountsAccountsBuilder) GetAsksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetOrderPayerTokenAccountAccount sets the "orderPayerTokenAccount" account.
func (inst *PlaceOrderMarketAccountsAccountsBuilder) SetOrderPayerTokenAccountAccount(orderPayerTokenAccount ag_solanago.PublicKey) *PlaceOrderMarketAccountsAccountsBuilder {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(orderPayerTokenAccount).WRITE()
	return inst
}

// GetOrderPayerTokenAccountAccount gets the "orderPayerTokenAccount" account.
func (inst *PlaceOrderMarketAccountsAccountsBuilder) GetOrderPayerTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetCoinVaultAccount sets the "coinVault" account.
func (inst *PlaceOrderMarketAccountsAccountsBuilder) SetCoinVaultAccount(coinVault ag_solanago.PublicKey) *PlaceOrderMarketAccountsAccountsBuilder {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(coinVault).WRITE()
	return inst
}

// GetCoinVaultAccount gets the "coinVault" account.
func (inst *PlaceOrderMarketAccountsAccountsBuilder) GetCoinVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetPcVaultAccount sets the "pcVault" account.
func (inst *PlaceOrderMarketAccountsAccountsBuilder) SetPcVaultAccount(pcVault ag_solanago.PublicKey) *PlaceOrderMarketAccountsAccountsBuilder {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(pcVault).WRITE()
	return inst
}

// GetPcVaultAccount gets the "pcVault" account.
func (inst *PlaceOrderMarketAccountsAccountsBuilder) GetPcVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetCoinWalletAccount sets the "coinWallet" account.
func (inst *PlaceOrderMarketAccountsAccountsBuilder) SetCoinWalletAccount(coinWallet ag_solanago.PublicKey) *PlaceOrderMarketAccountsAccountsBuilder {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(coinWallet).WRITE()
	return inst
}

// GetCoinWalletAccount gets the "coinWallet" account.
func (inst *PlaceOrderMarketAccountsAccountsBuilder) GetCoinWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPcWalletAccount sets the "pcWallet" account.
func (inst *PlaceOrderMarketAccountsAccountsBuilder) SetPcWalletAccount(pcWallet ag_solanago.PublicKey) *PlaceOrderMarketAccountsAccountsBuilder {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(pcWallet).WRITE()
	return inst
}

// GetPcWalletAccount gets the "pcWallet" account.
func (inst *PlaceOrderMarketAccountsAccountsBuilder) GetPcWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetOracleAccount sets the "oracle" account.
func (inst *PlaceOrder) SetOracleAccount(oracle ag_solanago.PublicKey) *PlaceOrder {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(oracle)
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *PlaceOrder) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(20)
}

// SetMarketNodeAccount sets the "marketNode" account.
func (inst *PlaceOrder) SetMarketNodeAccount(marketNode ag_solanago.PublicKey) *PlaceOrder {
	inst.AccountMetaSlice[21] = ag_solanago.Meta(marketNode).WRITE()
	return inst
}

// GetMarketNodeAccount gets the "marketNode" account.
func (inst *PlaceOrder) GetMarketNodeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(21)
}

// SetMarketMintAccount sets the "marketMint" account.
func (inst *PlaceOrder) SetMarketMintAccount(marketMint ag_solanago.PublicKey) *PlaceOrder {
	inst.AccountMetaSlice[22] = ag_solanago.Meta(marketMint).WRITE()
	return inst
}

// GetMarketMintAccount gets the "marketMint" account.
func (inst *PlaceOrder) GetMarketMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(22)
}

// SetMintAuthorityAccount sets the "mintAuthority" account.
func (inst *PlaceOrder) SetMintAuthorityAccount(mintAuthority ag_solanago.PublicKey) *PlaceOrder {
	inst.AccountMetaSlice[23] = ag_solanago.Meta(mintAuthority)
	return inst
}

// GetMintAuthorityAccount gets the "mintAuthority" account.
func (inst *PlaceOrder) GetMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(23)
}

func (inst PlaceOrder) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_PlaceOrder,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst PlaceOrder) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *PlaceOrder) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Price == nil {
			return errors.New("Price parameter is not set")
		}
		if inst.Size == nil {
			return errors.New("Size parameter is not set")
		}
		if inst.Side == nil {
			return errors.New("Side parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ZetaGroup is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MarginAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.DexProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SerumAuthority is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Greeks is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.OpenOrders is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.MarketAccountsMarket is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.MarketAccountsRequestQueue is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.MarketAccountsEventQueue is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.MarketAccountsBids is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.MarketAccountsAsks is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.MarketAccountsOrderPayerTokenAccount is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.MarketAccountsCoinVault is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.MarketAccountsPcVault is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.MarketAccountsCoinWallet is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.MarketAccountsPcWallet is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[21] == nil {
			return errors.New("accounts.MarketNode is not set")
		}
		if inst.AccountMetaSlice[22] == nil {
			return errors.New("accounts.MarketMint is not set")
		}
		if inst.AccountMetaSlice[23] == nil {
			return errors.New("accounts.MintAuthority is not set")
		}
	}
	return nil
}

func (inst *PlaceOrder) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("PlaceOrder")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        Price", *inst.Price))
						paramsBranch.Child(ag_format.Param("         Size", *inst.Size))
						paramsBranch.Child(ag_format.Param("         Side", *inst.Side))
						paramsBranch.Child(ag_format.Param("ClientOrderId (OPT)", inst.ClientOrderId))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=24]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                         state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                     zetaGroup", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                        margin", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                     authority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                    dexProgram", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                  tokenProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                serumAuthority", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                        greeks", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                    openOrders", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                          rent", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("         marketAccounts/market", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("   marketAccounts/requestQueue", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("     marketAccounts/eventQueue", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("           marketAccounts/bids", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("           marketAccounts/asks", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("marketAccounts/orderPayerToken", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("      marketAccounts/coinVault", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("        marketAccounts/pcVault", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("     marketAccounts/coinWallet", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("       marketAccounts/pcWallet", inst.AccountMetaSlice.Get(19)))
						accountsBranch.Child(ag_format.Meta("                        oracle", inst.AccountMetaSlice.Get(20)))
						accountsBranch.Child(ag_format.Meta("                    marketNode", inst.AccountMetaSlice.Get(21)))
						accountsBranch.Child(ag_format.Meta("                    marketMint", inst.AccountMetaSlice.Get(22)))
						accountsBranch.Child(ag_format.Meta("                 mintAuthority", inst.AccountMetaSlice.Get(23)))
					})
				})
		})
}

func (obj PlaceOrder) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `Size` param:
	err = encoder.Encode(obj.Size)
	if err != nil {
		return err
	}
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	// Serialize `ClientOrderId` param (optional):
	{
		if obj.ClientOrderId == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ClientOrderId)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *PlaceOrder) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `Size`:
	err = decoder.Decode(&obj.Size)
	if err != nil {
		return err
	}
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	// Deserialize `ClientOrderId` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ClientOrderId)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewPlaceOrderInstruction declares a new PlaceOrder instruction with the provided parameters and accounts.
func NewPlaceOrderInstruction(
	// Parameters:
	price uint64,
	size uint64,
	side Side,
	clientOrderId uint64,
	// Accounts:
	state ag_solanago.PublicKey,
	zetaGroup ag_solanago.PublicKey,
	marginAccount ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	dexProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	serumAuthority ag_solanago.PublicKey,
	greeks ag_solanago.PublicKey,
	openOrders ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	marketAccountsMarket ag_solanago.PublicKey,
	marketAccountsRequestQueue ag_solanago.PublicKey,
	marketAccountsEventQueue ag_solanago.PublicKey,
	marketAccountsBids ag_solanago.PublicKey,
	marketAccountsAsks ag_solanago.PublicKey,
	marketAccountsOrderPayerTokenAccount ag_solanago.PublicKey,
	marketAccountsCoinVault ag_solanago.PublicKey,
	marketAccountsPcVault ag_solanago.PublicKey,
	marketAccountsCoinWallet ag_solanago.PublicKey,
	marketAccountsPcWallet ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	marketNode ag_solanago.PublicKey,
	marketMint ag_solanago.PublicKey,
	mintAuthority ag_solanago.PublicKey) *PlaceOrder {
	return NewPlaceOrderInstructionBuilder().
		SetPrice(price).
		SetSize(size).
		SetSide(side).
		SetClientOrderId(clientOrderId).
		SetStateAccount(state).
		SetZetaGroupAccount(zetaGroup).
		SetMarginAccountAccount(marginAccount).
		SetAuthorityAccount(authority).
		SetDexProgramAccount(dexProgram).
		SetTokenProgramAccount(tokenProgram).
		SetSerumAuthorityAccount(serumAuthority).
		SetGreeksAccount(greeks).
		SetOpenOrdersAccount(openOrders).
		SetRentAccount(rent).
		SetMarketAccountsAccountsFromBuilder(
			NewPlaceOrderMarketAccountsAccountsBuilder().
				SetMarketAccount(marketAccountsMarket).
				SetRequestQueueAccount(marketAccountsRequestQueue).
				SetEventQueueAccount(marketAccountsEventQueue).
				SetBidsAccount(marketAccountsBids).
				SetAsksAccount(marketAccountsAsks).
				SetOrderPayerTokenAccountAccount(marketAccountsOrderPayerTokenAccount).
				SetCoinVaultAccount(marketAccountsCoinVault).
				SetPcVaultAccount(marketAccountsPcVault).
				SetCoinWalletAccount(marketAccountsCoinWallet).
				SetPcWalletAccount(marketAccountsPcWallet),
		).
		SetOracleAccount(oracle).
		SetMarketNodeAccount(marketNode).
		SetMarketMintAccount(marketMint).
		SetMintAuthorityAccount(mintAuthority)
}
