// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package zeta

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeZetaGroup is the `initializeZetaGroup` instruction.
type InitializeZetaGroup struct {
	Args *InitializeZetaGroupArgs

	// [0] = [WRITE] state
	//
	// [1] = [WRITE, SIGNER] admin
	//
	// [2] = [] systemProgram
	//
	// [3] = [] underlyingMint
	//
	// [4] = [] zetaProgram
	//
	// [5] = [] oracle
	//
	// [6] = [WRITE] zetaGroup
	//
	// [7] = [WRITE] greeks
	//
	// [8] = [WRITE] underlying
	//
	// [9] = [WRITE] vault
	//
	// [10] = [WRITE] insuranceVault
	//
	// [11] = [WRITE] socializedLossAccount
	//
	// [12] = [] tokenProgram
	//
	// [13] = [] usdcMint
	//
	// [14] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeZetaGroupInstructionBuilder creates a new `InitializeZetaGroup` instruction builder.
func NewInitializeZetaGroupInstructionBuilder() *InitializeZetaGroup {
	nd := &InitializeZetaGroup{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 15),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *InitializeZetaGroup) SetArgs(args InitializeZetaGroupArgs) *InitializeZetaGroup {
	inst.Args = &args
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *InitializeZetaGroup) SetStateAccount(state ag_solanago.PublicKey) *InitializeZetaGroup {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *InitializeZetaGroup) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAccount sets the "admin" account.
func (inst *InitializeZetaGroup) SetAdminAccount(admin ag_solanago.PublicKey) *InitializeZetaGroup {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *InitializeZetaGroup) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializeZetaGroup) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeZetaGroup {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializeZetaGroup) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUnderlyingMintAccount sets the "underlyingMint" account.
func (inst *InitializeZetaGroup) SetUnderlyingMintAccount(underlyingMint ag_solanago.PublicKey) *InitializeZetaGroup {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(underlyingMint)
	return inst
}

// GetUnderlyingMintAccount gets the "underlyingMint" account.
func (inst *InitializeZetaGroup) GetUnderlyingMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetZetaProgramAccount sets the "zetaProgram" account.
func (inst *InitializeZetaGroup) SetZetaProgramAccount(zetaProgram ag_solanago.PublicKey) *InitializeZetaGroup {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(zetaProgram)
	return inst
}

// GetZetaProgramAccount gets the "zetaProgram" account.
func (inst *InitializeZetaGroup) GetZetaProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetOracleAccount sets the "oracle" account.
func (inst *InitializeZetaGroup) SetOracleAccount(oracle ag_solanago.PublicKey) *InitializeZetaGroup {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(oracle)
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *InitializeZetaGroup) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetZetaGroupAccount sets the "zetaGroup" account.
func (inst *InitializeZetaGroup) SetZetaGroupAccount(zetaGroup ag_solanago.PublicKey) *InitializeZetaGroup {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(zetaGroup).WRITE()
	return inst
}

// GetZetaGroupAccount gets the "zetaGroup" account.
func (inst *InitializeZetaGroup) GetZetaGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetGreeksAccount sets the "greeks" account.
func (inst *InitializeZetaGroup) SetGreeksAccount(greeks ag_solanago.PublicKey) *InitializeZetaGroup {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(greeks).WRITE()
	return inst
}

// GetGreeksAccount gets the "greeks" account.
func (inst *InitializeZetaGroup) GetGreeksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetUnderlyingAccount sets the "underlying" account.
func (inst *InitializeZetaGroup) SetUnderlyingAccount(underlying ag_solanago.PublicKey) *InitializeZetaGroup {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(underlying).WRITE()
	return inst
}

// GetUnderlyingAccount gets the "underlying" account.
func (inst *InitializeZetaGroup) GetUnderlyingAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetVaultAccount sets the "vault" account.
func (inst *InitializeZetaGroup) SetVaultAccount(vault ag_solanago.PublicKey) *InitializeZetaGroup {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *InitializeZetaGroup) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetInsuranceVaultAccount sets the "insuranceVault" account.
func (inst *InitializeZetaGroup) SetInsuranceVaultAccount(insuranceVault ag_solanago.PublicKey) *InitializeZetaGroup {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(insuranceVault).WRITE()
	return inst
}

// GetInsuranceVaultAccount gets the "insuranceVault" account.
func (inst *InitializeZetaGroup) GetInsuranceVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSocializedLossAccountAccount sets the "socializedLossAccount" account.
func (inst *InitializeZetaGroup) SetSocializedLossAccountAccount(socializedLossAccount ag_solanago.PublicKey) *InitializeZetaGroup {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(socializedLossAccount).WRITE()
	return inst
}

// GetSocializedLossAccountAccount gets the "socializedLossAccount" account.
func (inst *InitializeZetaGroup) GetSocializedLossAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *InitializeZetaGroup) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *InitializeZetaGroup {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *InitializeZetaGroup) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetUsdcMintAccount sets the "usdcMint" account.
func (inst *InitializeZetaGroup) SetUsdcMintAccount(usdcMint ag_solanago.PublicKey) *InitializeZetaGroup {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(usdcMint)
	return inst
}

// GetUsdcMintAccount gets the "usdcMint" account.
func (inst *InitializeZetaGroup) GetUsdcMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetRentAccount sets the "rent" account.
func (inst *InitializeZetaGroup) SetRentAccount(rent ag_solanago.PublicKey) *InitializeZetaGroup {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *InitializeZetaGroup) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

func (inst InitializeZetaGroup) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeZetaGroup,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeZetaGroup) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeZetaGroup) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UnderlyingMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ZetaProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ZetaGroup is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Greeks is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Underlying is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.InsuranceVault is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SocializedLossAccount is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.UsdcMint is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *InitializeZetaGroup) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeZetaGroup")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=15]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         admin", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" systemProgram", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("underlyingMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("   zetaProgram", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        oracle", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     zetaGroup", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("        greeks", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("    underlying", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("         vault", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("insuranceVault", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("socializedLoss", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("  tokenProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("      usdcMint", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("          rent", inst.AccountMetaSlice.Get(14)))
					})
				})
		})
}

func (obj InitializeZetaGroup) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeZetaGroup) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeZetaGroupInstruction declares a new InitializeZetaGroup instruction with the provided parameters and accounts.
func NewInitializeZetaGroupInstruction(
	// Parameters:
	args InitializeZetaGroupArgs,
	// Accounts:
	state ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	underlyingMint ag_solanago.PublicKey,
	zetaProgram ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	zetaGroup ag_solanago.PublicKey,
	greeks ag_solanago.PublicKey,
	underlying ag_solanago.PublicKey,
	vault ag_solanago.PublicKey,
	insuranceVault ag_solanago.PublicKey,
	socializedLossAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	usdcMint ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *InitializeZetaGroup {
	return NewInitializeZetaGroupInstructionBuilder().
		SetArgs(args).
		SetStateAccount(state).
		SetAdminAccount(admin).
		SetSystemProgramAccount(systemProgram).
		SetUnderlyingMintAccount(underlyingMint).
		SetZetaProgramAccount(zetaProgram).
		SetOracleAccount(oracle).
		SetZetaGroupAccount(zetaGroup).
		SetGreeksAccount(greeks).
		SetUnderlyingAccount(underlying).
		SetVaultAccount(vault).
		SetInsuranceVaultAccount(insuranceVault).
		SetSocializedLossAccountAccount(socializedLossAccount).
		SetTokenProgramAccount(tokenProgram).
		SetUsdcMintAccount(usdcMint).
		SetRentAccount(rent)
}
