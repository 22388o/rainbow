// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package zeta

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeOpenOrders is the `initializeOpenOrders` instruction.
type InitializeOpenOrders struct {
	Nonce    *uint8
	MapNonce *uint8

	// [0] = [] state
	//
	// [1] = [] zetaGroup
	//
	// [2] = [] dexProgram
	//
	// [3] = [] systemProgram
	//
	// [4] = [WRITE] openOrders
	//
	// [5] = [WRITE] marginAccount
	//
	// [6] = [WRITE, SIGNER] authority
	//
	// [7] = [] market
	//
	// [8] = [] serumAuthority
	//
	// [9] = [WRITE] openOrdersMap
	//
	// [10] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeOpenOrdersInstructionBuilder creates a new `InitializeOpenOrders` instruction builder.
func NewInitializeOpenOrdersInstructionBuilder() *InitializeOpenOrders {
	nd := &InitializeOpenOrders{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	return nd
}

// SetNonce sets the "nonce" parameter.
func (inst *InitializeOpenOrders) SetNonce(nonce uint8) *InitializeOpenOrders {
	inst.Nonce = &nonce
	return inst
}

// SetMapNonce sets the "mapNonce" parameter.
func (inst *InitializeOpenOrders) SetMapNonce(mapNonce uint8) *InitializeOpenOrders {
	inst.MapNonce = &mapNonce
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *InitializeOpenOrders) SetStateAccount(state ag_solanago.PublicKey) *InitializeOpenOrders {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *InitializeOpenOrders) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetZetaGroupAccount sets the "zetaGroup" account.
func (inst *InitializeOpenOrders) SetZetaGroupAccount(zetaGroup ag_solanago.PublicKey) *InitializeOpenOrders {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(zetaGroup)
	return inst
}

// GetZetaGroupAccount gets the "zetaGroup" account.
func (inst *InitializeOpenOrders) GetZetaGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetDexProgramAccount sets the "dexProgram" account.
func (inst *InitializeOpenOrders) SetDexProgramAccount(dexProgram ag_solanago.PublicKey) *InitializeOpenOrders {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(dexProgram)
	return inst
}

// GetDexProgramAccount gets the "dexProgram" account.
func (inst *InitializeOpenOrders) GetDexProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializeOpenOrders) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeOpenOrders {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializeOpenOrders) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetOpenOrdersAccount sets the "openOrders" account.
func (inst *InitializeOpenOrders) SetOpenOrdersAccount(openOrders ag_solanago.PublicKey) *InitializeOpenOrders {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(openOrders).WRITE()
	return inst
}

// GetOpenOrdersAccount gets the "openOrders" account.
func (inst *InitializeOpenOrders) GetOpenOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMarginAccountAccount sets the "marginAccount" account.
func (inst *InitializeOpenOrders) SetMarginAccountAccount(marginAccount ag_solanago.PublicKey) *InitializeOpenOrders {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(marginAccount).WRITE()
	return inst
}

// GetMarginAccountAccount gets the "marginAccount" account.
func (inst *InitializeOpenOrders) GetMarginAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *InitializeOpenOrders) SetAuthorityAccount(authority ag_solanago.PublicKey) *InitializeOpenOrders {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *InitializeOpenOrders) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetMarketAccount sets the "market" account.
func (inst *InitializeOpenOrders) SetMarketAccount(market ag_solanago.PublicKey) *InitializeOpenOrders {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(market)
	return inst
}

// GetMarketAccount gets the "market" account.
func (inst *InitializeOpenOrders) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSerumAuthorityAccount sets the "serumAuthority" account.
func (inst *InitializeOpenOrders) SetSerumAuthorityAccount(serumAuthority ag_solanago.PublicKey) *InitializeOpenOrders {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(serumAuthority)
	return inst
}

// GetSerumAuthorityAccount gets the "serumAuthority" account.
func (inst *InitializeOpenOrders) GetSerumAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetOpenOrdersMapAccount sets the "openOrdersMap" account.
func (inst *InitializeOpenOrders) SetOpenOrdersMapAccount(openOrdersMap ag_solanago.PublicKey) *InitializeOpenOrders {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(openOrdersMap).WRITE()
	return inst
}

// GetOpenOrdersMapAccount gets the "openOrdersMap" account.
func (inst *InitializeOpenOrders) GetOpenOrdersMapAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetRentAccount sets the "rent" account.
func (inst *InitializeOpenOrders) SetRentAccount(rent ag_solanago.PublicKey) *InitializeOpenOrders {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *InitializeOpenOrders) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst InitializeOpenOrders) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeOpenOrders,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeOpenOrders) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeOpenOrders) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Nonce == nil {
			return errors.New("Nonce parameter is not set")
		}
		if inst.MapNonce == nil {
			return errors.New("MapNonce parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ZetaGroup is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.DexProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.OpenOrders is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.MarginAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SerumAuthority is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.OpenOrdersMap is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *InitializeOpenOrders) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeOpenOrders")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("   Nonce", *inst.Nonce))
						paramsBranch.Child(ag_format.Param("MapNonce", *inst.MapNonce))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     zetaGroup", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    dexProgram", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta(" systemProgram", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("    openOrders", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        margin", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     authority", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("        market", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("serumAuthority", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta(" openOrdersMap", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("          rent", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj InitializeOpenOrders) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `MapNonce` param:
	err = encoder.Encode(obj.MapNonce)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeOpenOrders) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `MapNonce`:
	err = decoder.Decode(&obj.MapNonce)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeOpenOrdersInstruction declares a new InitializeOpenOrders instruction with the provided parameters and accounts.
func NewInitializeOpenOrdersInstruction(
	// Parameters:
	nonce uint8,
	mapNonce uint8,
	// Accounts:
	state ag_solanago.PublicKey,
	zetaGroup ag_solanago.PublicKey,
	dexProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	openOrders ag_solanago.PublicKey,
	marginAccount ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	market ag_solanago.PublicKey,
	serumAuthority ag_solanago.PublicKey,
	openOrdersMap ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *InitializeOpenOrders {
	return NewInitializeOpenOrdersInstructionBuilder().
		SetNonce(nonce).
		SetMapNonce(mapNonce).
		SetStateAccount(state).
		SetZetaGroupAccount(zetaGroup).
		SetDexProgramAccount(dexProgram).
		SetSystemProgramAccount(systemProgram).
		SetOpenOrdersAccount(openOrders).
		SetMarginAccountAccount(marginAccount).
		SetAuthorityAccount(authority).
		SetMarketAccount(market).
		SetSerumAuthorityAccount(serumAuthority).
		SetOpenOrdersMapAccount(openOrdersMap).
		SetRentAccount(rent)
}
