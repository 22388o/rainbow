// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package zeta

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// RebalanceInsuranceVault is the `rebalanceInsuranceVault` instruction.
type RebalanceInsuranceVault struct {

	// [0] = [] zetaGroup
	//
	// [1] = [WRITE] zetaVault
	//
	// [2] = [WRITE] insuranceVault
	//
	// [3] = [WRITE] socializedLossAccount
	//
	// [4] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRebalanceInsuranceVaultInstructionBuilder creates a new `RebalanceInsuranceVault` instruction builder.
func NewRebalanceInsuranceVaultInstructionBuilder() *RebalanceInsuranceVault {
	nd := &RebalanceInsuranceVault{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetZetaGroupAccount sets the "zetaGroup" account.
func (inst *RebalanceInsuranceVault) SetZetaGroupAccount(zetaGroup ag_solanago.PublicKey) *RebalanceInsuranceVault {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(zetaGroup)
	return inst
}

// GetZetaGroupAccount gets the "zetaGroup" account.
func (inst *RebalanceInsuranceVault) GetZetaGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetZetaVaultAccount sets the "zetaVault" account.
func (inst *RebalanceInsuranceVault) SetZetaVaultAccount(zetaVault ag_solanago.PublicKey) *RebalanceInsuranceVault {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(zetaVault).WRITE()
	return inst
}

// GetZetaVaultAccount gets the "zetaVault" account.
func (inst *RebalanceInsuranceVault) GetZetaVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetInsuranceVaultAccount sets the "insuranceVault" account.
func (inst *RebalanceInsuranceVault) SetInsuranceVaultAccount(insuranceVault ag_solanago.PublicKey) *RebalanceInsuranceVault {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(insuranceVault).WRITE()
	return inst
}

// GetInsuranceVaultAccount gets the "insuranceVault" account.
func (inst *RebalanceInsuranceVault) GetInsuranceVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSocializedLossAccountAccount sets the "socializedLossAccount" account.
func (inst *RebalanceInsuranceVault) SetSocializedLossAccountAccount(socializedLossAccount ag_solanago.PublicKey) *RebalanceInsuranceVault {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(socializedLossAccount).WRITE()
	return inst
}

// GetSocializedLossAccountAccount gets the "socializedLossAccount" account.
func (inst *RebalanceInsuranceVault) GetSocializedLossAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *RebalanceInsuranceVault) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *RebalanceInsuranceVault {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *RebalanceInsuranceVault) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst RebalanceInsuranceVault) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RebalanceInsuranceVault,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RebalanceInsuranceVault) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RebalanceInsuranceVault) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.ZetaGroup is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ZetaVault is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.InsuranceVault is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SocializedLossAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *RebalanceInsuranceVault) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RebalanceInsuranceVault")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     zetaGroup", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     zetaVault", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("insuranceVault", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("socializedLoss", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  tokenProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj RebalanceInsuranceVault) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *RebalanceInsuranceVault) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewRebalanceInsuranceVaultInstruction declares a new RebalanceInsuranceVault instruction with the provided parameters and accounts.
func NewRebalanceInsuranceVaultInstruction(
	// Accounts:
	zetaGroup ag_solanago.PublicKey,
	zetaVault ag_solanago.PublicKey,
	insuranceVault ag_solanago.PublicKey,
	socializedLossAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *RebalanceInsuranceVault {
	return NewRebalanceInsuranceVaultInstructionBuilder().
		SetZetaGroupAccount(zetaGroup).
		SetZetaVaultAccount(zetaVault).
		SetInsuranceVaultAccount(insuranceVault).
		SetSocializedLossAccountAccount(socializedLossAccount).
		SetTokenProgramAccount(tokenProgram)
}
