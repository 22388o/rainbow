// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package zeta

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type ProductGreeks struct {
	Delta      uint64
	Vega       AnchorDecimal
	Volatility AnchorDecimal
}

func (obj ProductGreeks) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Delta` param:
	err = encoder.Encode(obj.Delta)
	if err != nil {
		return err
	}
	// Serialize `Vega` param:
	err = encoder.Encode(obj.Vega)
	if err != nil {
		return err
	}
	// Serialize `Volatility` param:
	err = encoder.Encode(obj.Volatility)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProductGreeks) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Delta`:
	err = decoder.Decode(&obj.Delta)
	if err != nil {
		return err
	}
	// Deserialize `Vega`:
	err = decoder.Decode(&obj.Vega)
	if err != nil {
		return err
	}
	// Deserialize `Volatility`:
	err = decoder.Decode(&obj.Volatility)
	if err != nil {
		return err
	}
	return nil
}

type AnchorDecimal struct {
	Flags uint32
	Hi    uint32
	Lo    uint32
	Mid   uint32
}

func (obj AnchorDecimal) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Flags` param:
	err = encoder.Encode(obj.Flags)
	if err != nil {
		return err
	}
	// Serialize `Hi` param:
	err = encoder.Encode(obj.Hi)
	if err != nil {
		return err
	}
	// Serialize `Lo` param:
	err = encoder.Encode(obj.Lo)
	if err != nil {
		return err
	}
	// Serialize `Mid` param:
	err = encoder.Encode(obj.Mid)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AnchorDecimal) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Flags`:
	err = decoder.Decode(&obj.Flags)
	if err != nil {
		return err
	}
	// Deserialize `Hi`:
	err = decoder.Decode(&obj.Hi)
	if err != nil {
		return err
	}
	// Deserialize `Lo`:
	err = decoder.Decode(&obj.Lo)
	if err != nil {
		return err
	}
	// Deserialize `Mid`:
	err = decoder.Decode(&obj.Mid)
	if err != nil {
		return err
	}
	return nil
}

type HaltState struct {
	Halted                    bool
	SpotPrice                 uint64
	Timestamp                 uint64
	MarkPricesSet             [2]bool
	MarkPricesSetPadding      [4]bool
	MarketNodesCleaned        [2]bool
	MarketNodesCleanedPadding [4]bool
	MarketCleaned             [46]bool
	MarketCleanedPadding      [92]bool
}

func (obj HaltState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Halted` param:
	err = encoder.Encode(obj.Halted)
	if err != nil {
		return err
	}
	// Serialize `SpotPrice` param:
	err = encoder.Encode(obj.SpotPrice)
	if err != nil {
		return err
	}
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `MarkPricesSet` param:
	err = encoder.Encode(obj.MarkPricesSet)
	if err != nil {
		return err
	}
	// Serialize `MarkPricesSetPadding` param:
	err = encoder.Encode(obj.MarkPricesSetPadding)
	if err != nil {
		return err
	}
	// Serialize `MarketNodesCleaned` param:
	err = encoder.Encode(obj.MarketNodesCleaned)
	if err != nil {
		return err
	}
	// Serialize `MarketNodesCleanedPadding` param:
	err = encoder.Encode(obj.MarketNodesCleanedPadding)
	if err != nil {
		return err
	}
	// Serialize `MarketCleaned` param:
	err = encoder.Encode(obj.MarketCleaned)
	if err != nil {
		return err
	}
	// Serialize `MarketCleanedPadding` param:
	err = encoder.Encode(obj.MarketCleanedPadding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *HaltState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Halted`:
	err = decoder.Decode(&obj.Halted)
	if err != nil {
		return err
	}
	// Deserialize `SpotPrice`:
	err = decoder.Decode(&obj.SpotPrice)
	if err != nil {
		return err
	}
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `MarkPricesSet`:
	err = decoder.Decode(&obj.MarkPricesSet)
	if err != nil {
		return err
	}
	// Deserialize `MarkPricesSetPadding`:
	err = decoder.Decode(&obj.MarkPricesSetPadding)
	if err != nil {
		return err
	}
	// Deserialize `MarketNodesCleaned`:
	err = decoder.Decode(&obj.MarketNodesCleaned)
	if err != nil {
		return err
	}
	// Deserialize `MarketNodesCleanedPadding`:
	err = decoder.Decode(&obj.MarketNodesCleanedPadding)
	if err != nil {
		return err
	}
	// Deserialize `MarketCleaned`:
	err = decoder.Decode(&obj.MarketCleaned)
	if err != nil {
		return err
	}
	// Deserialize `MarketCleanedPadding`:
	err = decoder.Decode(&obj.MarketCleanedPadding)
	if err != nil {
		return err
	}
	return nil
}

type PricingParameters struct {
	OptionTradeNormalizer AnchorDecimal
	FutureTradeNormalizer AnchorDecimal
	MaxVolatilityRetreat  AnchorDecimal
	MaxInterestRetreat    AnchorDecimal
	MaxDelta              uint64
	MinDelta              uint64
	MinVolatility         uint64
	MaxVolatility         uint64
	MinInterestRate       int64
	MaxInterestRate       int64
}

func (obj PricingParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OptionTradeNormalizer` param:
	err = encoder.Encode(obj.OptionTradeNormalizer)
	if err != nil {
		return err
	}
	// Serialize `FutureTradeNormalizer` param:
	err = encoder.Encode(obj.FutureTradeNormalizer)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityRetreat` param:
	err = encoder.Encode(obj.MaxVolatilityRetreat)
	if err != nil {
		return err
	}
	// Serialize `MaxInterestRetreat` param:
	err = encoder.Encode(obj.MaxInterestRetreat)
	if err != nil {
		return err
	}
	// Serialize `MaxDelta` param:
	err = encoder.Encode(obj.MaxDelta)
	if err != nil {
		return err
	}
	// Serialize `MinDelta` param:
	err = encoder.Encode(obj.MinDelta)
	if err != nil {
		return err
	}
	// Serialize `MinVolatility` param:
	err = encoder.Encode(obj.MinVolatility)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatility` param:
	err = encoder.Encode(obj.MaxVolatility)
	if err != nil {
		return err
	}
	// Serialize `MinInterestRate` param:
	err = encoder.Encode(obj.MinInterestRate)
	if err != nil {
		return err
	}
	// Serialize `MaxInterestRate` param:
	err = encoder.Encode(obj.MaxInterestRate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PricingParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OptionTradeNormalizer`:
	err = decoder.Decode(&obj.OptionTradeNormalizer)
	if err != nil {
		return err
	}
	// Deserialize `FutureTradeNormalizer`:
	err = decoder.Decode(&obj.FutureTradeNormalizer)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityRetreat`:
	err = decoder.Decode(&obj.MaxVolatilityRetreat)
	if err != nil {
		return err
	}
	// Deserialize `MaxInterestRetreat`:
	err = decoder.Decode(&obj.MaxInterestRetreat)
	if err != nil {
		return err
	}
	// Deserialize `MaxDelta`:
	err = decoder.Decode(&obj.MaxDelta)
	if err != nil {
		return err
	}
	// Deserialize `MinDelta`:
	err = decoder.Decode(&obj.MinDelta)
	if err != nil {
		return err
	}
	// Deserialize `MinVolatility`:
	err = decoder.Decode(&obj.MinVolatility)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatility`:
	err = decoder.Decode(&obj.MaxVolatility)
	if err != nil {
		return err
	}
	// Deserialize `MinInterestRate`:
	err = decoder.Decode(&obj.MinInterestRate)
	if err != nil {
		return err
	}
	// Deserialize `MaxInterestRate`:
	err = decoder.Decode(&obj.MaxInterestRate)
	if err != nil {
		return err
	}
	return nil
}

type MarginParameters struct {
	FutureMarginInitial                     uint64
	FutureMarginMaintenance                 uint64
	OptionMarkPercentageLongInitial         uint64
	OptionSpotPercentageLongInitial         uint64
	OptionSpotPercentageShortInitial        uint64
	OptionDynamicPercentageShortInitial     uint64
	OptionMarkPercentageLongMaintenance     uint64
	OptionSpotPercentageLongMaintenance     uint64
	OptionSpotPercentageShortMaintenance    uint64
	OptionDynamicPercentageShortMaintenance uint64
	OptionShortPutCapPercentage             uint64
	Padding                                 [32]uint8
}

func (obj MarginParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FutureMarginInitial` param:
	err = encoder.Encode(obj.FutureMarginInitial)
	if err != nil {
		return err
	}
	// Serialize `FutureMarginMaintenance` param:
	err = encoder.Encode(obj.FutureMarginMaintenance)
	if err != nil {
		return err
	}
	// Serialize `OptionMarkPercentageLongInitial` param:
	err = encoder.Encode(obj.OptionMarkPercentageLongInitial)
	if err != nil {
		return err
	}
	// Serialize `OptionSpotPercentageLongInitial` param:
	err = encoder.Encode(obj.OptionSpotPercentageLongInitial)
	if err != nil {
		return err
	}
	// Serialize `OptionSpotPercentageShortInitial` param:
	err = encoder.Encode(obj.OptionSpotPercentageShortInitial)
	if err != nil {
		return err
	}
	// Serialize `OptionDynamicPercentageShortInitial` param:
	err = encoder.Encode(obj.OptionDynamicPercentageShortInitial)
	if err != nil {
		return err
	}
	// Serialize `OptionMarkPercentageLongMaintenance` param:
	err = encoder.Encode(obj.OptionMarkPercentageLongMaintenance)
	if err != nil {
		return err
	}
	// Serialize `OptionSpotPercentageLongMaintenance` param:
	err = encoder.Encode(obj.OptionSpotPercentageLongMaintenance)
	if err != nil {
		return err
	}
	// Serialize `OptionSpotPercentageShortMaintenance` param:
	err = encoder.Encode(obj.OptionSpotPercentageShortMaintenance)
	if err != nil {
		return err
	}
	// Serialize `OptionDynamicPercentageShortMaintenance` param:
	err = encoder.Encode(obj.OptionDynamicPercentageShortMaintenance)
	if err != nil {
		return err
	}
	// Serialize `OptionShortPutCapPercentage` param:
	err = encoder.Encode(obj.OptionShortPutCapPercentage)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MarginParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FutureMarginInitial`:
	err = decoder.Decode(&obj.FutureMarginInitial)
	if err != nil {
		return err
	}
	// Deserialize `FutureMarginMaintenance`:
	err = decoder.Decode(&obj.FutureMarginMaintenance)
	if err != nil {
		return err
	}
	// Deserialize `OptionMarkPercentageLongInitial`:
	err = decoder.Decode(&obj.OptionMarkPercentageLongInitial)
	if err != nil {
		return err
	}
	// Deserialize `OptionSpotPercentageLongInitial`:
	err = decoder.Decode(&obj.OptionSpotPercentageLongInitial)
	if err != nil {
		return err
	}
	// Deserialize `OptionSpotPercentageShortInitial`:
	err = decoder.Decode(&obj.OptionSpotPercentageShortInitial)
	if err != nil {
		return err
	}
	// Deserialize `OptionDynamicPercentageShortInitial`:
	err = decoder.Decode(&obj.OptionDynamicPercentageShortInitial)
	if err != nil {
		return err
	}
	// Deserialize `OptionMarkPercentageLongMaintenance`:
	err = decoder.Decode(&obj.OptionMarkPercentageLongMaintenance)
	if err != nil {
		return err
	}
	// Deserialize `OptionSpotPercentageLongMaintenance`:
	err = decoder.Decode(&obj.OptionSpotPercentageLongMaintenance)
	if err != nil {
		return err
	}
	// Deserialize `OptionSpotPercentageShortMaintenance`:
	err = decoder.Decode(&obj.OptionSpotPercentageShortMaintenance)
	if err != nil {
		return err
	}
	// Deserialize `OptionDynamicPercentageShortMaintenance`:
	err = decoder.Decode(&obj.OptionDynamicPercentageShortMaintenance)
	if err != nil {
		return err
	}
	// Deserialize `OptionShortPutCapPercentage`:
	err = decoder.Decode(&obj.OptionShortPutCapPercentage)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type ExpirySeries struct {
	ActiveTs uint64
	ExpiryTs uint64
	Dirty    bool
	Padding  [15]uint8
}

func (obj ExpirySeries) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ActiveTs` param:
	err = encoder.Encode(obj.ActiveTs)
	if err != nil {
		return err
	}
	// Serialize `ExpiryTs` param:
	err = encoder.Encode(obj.ExpiryTs)
	if err != nil {
		return err
	}
	// Serialize `Dirty` param:
	err = encoder.Encode(obj.Dirty)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExpirySeries) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ActiveTs`:
	err = decoder.Decode(&obj.ActiveTs)
	if err != nil {
		return err
	}
	// Deserialize `ExpiryTs`:
	err = decoder.Decode(&obj.ExpiryTs)
	if err != nil {
		return err
	}
	// Deserialize `Dirty`:
	err = decoder.Decode(&obj.Dirty)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type Strike struct {
	IsSet bool
	Value uint64
}

func (obj Strike) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `IsSet` param:
	err = encoder.Encode(obj.IsSet)
	if err != nil {
		return err
	}
	// Serialize `Value` param:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Strike) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `IsSet`:
	err = decoder.Decode(&obj.IsSet)
	if err != nil {
		return err
	}
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return err
	}
	return nil
}

type Product struct {
	Market ag_solanago.PublicKey
	Strike Strike
	Dirty  bool
	Kind   Kind
}

func (obj Product) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Market` param:
	err = encoder.Encode(obj.Market)
	if err != nil {
		return err
	}
	// Serialize `Strike` param:
	err = encoder.Encode(obj.Strike)
	if err != nil {
		return err
	}
	// Serialize `Dirty` param:
	err = encoder.Encode(obj.Dirty)
	if err != nil {
		return err
	}
	// Serialize `Kind` param:
	err = encoder.Encode(obj.Kind)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Product) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Market`:
	err = decoder.Decode(&obj.Market)
	if err != nil {
		return err
	}
	// Deserialize `Strike`:
	err = decoder.Decode(&obj.Strike)
	if err != nil {
		return err
	}
	// Deserialize `Dirty`:
	err = decoder.Decode(&obj.Dirty)
	if err != nil {
		return err
	}
	// Deserialize `Kind`:
	err = decoder.Decode(&obj.Kind)
	if err != nil {
		return err
	}
	return nil
}

type Position struct {
	Position      int64
	CostOfTrades  uint64
	ClosingOrders uint64
	OpeningOrders [2]uint64
}

func (obj Position) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `CostOfTrades` param:
	err = encoder.Encode(obj.CostOfTrades)
	if err != nil {
		return err
	}
	// Serialize `ClosingOrders` param:
	err = encoder.Encode(obj.ClosingOrders)
	if err != nil {
		return err
	}
	// Serialize `OpeningOrders` param:
	err = encoder.Encode(obj.OpeningOrders)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Position) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `CostOfTrades`:
	err = decoder.Decode(&obj.CostOfTrades)
	if err != nil {
		return err
	}
	// Deserialize `ClosingOrders`:
	err = decoder.Decode(&obj.ClosingOrders)
	if err != nil {
		return err
	}
	// Deserialize `OpeningOrders`:
	err = decoder.Decode(&obj.OpeningOrders)
	if err != nil {
		return err
	}
	return nil
}

type HaltZetaGroupArgs struct {
	SpotPrice uint64
	Timestamp uint64
}

func (obj HaltZetaGroupArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SpotPrice` param:
	err = encoder.Encode(obj.SpotPrice)
	if err != nil {
		return err
	}
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *HaltZetaGroupArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SpotPrice`:
	err = decoder.Decode(&obj.SpotPrice)
	if err != nil {
		return err
	}
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

type UpdateVolatilityArgs struct {
	ExpiryIndex uint8
	Volatility  [5]uint64
}

func (obj UpdateVolatilityArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ExpiryIndex` param:
	err = encoder.Encode(obj.ExpiryIndex)
	if err != nil {
		return err
	}
	// Serialize `Volatility` param:
	err = encoder.Encode(obj.Volatility)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UpdateVolatilityArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ExpiryIndex`:
	err = decoder.Decode(&obj.ExpiryIndex)
	if err != nil {
		return err
	}
	// Deserialize `Volatility`:
	err = decoder.Decode(&obj.Volatility)
	if err != nil {
		return err
	}
	return nil
}

type UpdateInterestRateArgs struct {
	ExpiryIndex  uint8
	InterestRate int64
}

func (obj UpdateInterestRateArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ExpiryIndex` param:
	err = encoder.Encode(obj.ExpiryIndex)
	if err != nil {
		return err
	}
	// Serialize `InterestRate` param:
	err = encoder.Encode(obj.InterestRate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UpdateInterestRateArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ExpiryIndex`:
	err = decoder.Decode(&obj.ExpiryIndex)
	if err != nil {
		return err
	}
	// Deserialize `InterestRate`:
	err = decoder.Decode(&obj.InterestRate)
	if err != nil {
		return err
	}
	return nil
}

type ExpireSeriesOverrideArgs struct {
	SettlementNonce uint8
	SettlementPrice uint64
}

func (obj ExpireSeriesOverrideArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SettlementNonce` param:
	err = encoder.Encode(obj.SettlementNonce)
	if err != nil {
		return err
	}
	// Serialize `SettlementPrice` param:
	err = encoder.Encode(obj.SettlementPrice)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExpireSeriesOverrideArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SettlementNonce`:
	err = decoder.Decode(&obj.SettlementNonce)
	if err != nil {
		return err
	}
	// Deserialize `SettlementPrice`:
	err = decoder.Decode(&obj.SettlementPrice)
	if err != nil {
		return err
	}
	return nil
}

type InitializeMarketArgs struct {
	Index               uint8
	MarketNonce         uint8
	BaseMintNonce       uint8
	QuoteMintNonce      uint8
	ZetaBaseVaultNonce  uint8
	ZetaQuoteVaultNonce uint8
	DexBaseVaultNonce   uint8
	DexQuoteVaultNonce  uint8
	VaultSignerNonce    uint64
}

func (obj InitializeMarketArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `MarketNonce` param:
	err = encoder.Encode(obj.MarketNonce)
	if err != nil {
		return err
	}
	// Serialize `BaseMintNonce` param:
	err = encoder.Encode(obj.BaseMintNonce)
	if err != nil {
		return err
	}
	// Serialize `QuoteMintNonce` param:
	err = encoder.Encode(obj.QuoteMintNonce)
	if err != nil {
		return err
	}
	// Serialize `ZetaBaseVaultNonce` param:
	err = encoder.Encode(obj.ZetaBaseVaultNonce)
	if err != nil {
		return err
	}
	// Serialize `ZetaQuoteVaultNonce` param:
	err = encoder.Encode(obj.ZetaQuoteVaultNonce)
	if err != nil {
		return err
	}
	// Serialize `DexBaseVaultNonce` param:
	err = encoder.Encode(obj.DexBaseVaultNonce)
	if err != nil {
		return err
	}
	// Serialize `DexQuoteVaultNonce` param:
	err = encoder.Encode(obj.DexQuoteVaultNonce)
	if err != nil {
		return err
	}
	// Serialize `VaultSignerNonce` param:
	err = encoder.Encode(obj.VaultSignerNonce)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeMarketArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `MarketNonce`:
	err = decoder.Decode(&obj.MarketNonce)
	if err != nil {
		return err
	}
	// Deserialize `BaseMintNonce`:
	err = decoder.Decode(&obj.BaseMintNonce)
	if err != nil {
		return err
	}
	// Deserialize `QuoteMintNonce`:
	err = decoder.Decode(&obj.QuoteMintNonce)
	if err != nil {
		return err
	}
	// Deserialize `ZetaBaseVaultNonce`:
	err = decoder.Decode(&obj.ZetaBaseVaultNonce)
	if err != nil {
		return err
	}
	// Deserialize `ZetaQuoteVaultNonce`:
	err = decoder.Decode(&obj.ZetaQuoteVaultNonce)
	if err != nil {
		return err
	}
	// Deserialize `DexBaseVaultNonce`:
	err = decoder.Decode(&obj.DexBaseVaultNonce)
	if err != nil {
		return err
	}
	// Deserialize `DexQuoteVaultNonce`:
	err = decoder.Decode(&obj.DexQuoteVaultNonce)
	if err != nil {
		return err
	}
	// Deserialize `VaultSignerNonce`:
	err = decoder.Decode(&obj.VaultSignerNonce)
	if err != nil {
		return err
	}
	return nil
}

type InitializeStateArgs struct {
	StateNonce                             uint8
	SerumNonce                             uint8
	MintAuthNonce                          uint8
	ExpiryIntervalSeconds                  uint32
	NewExpiryThresholdSeconds              uint32
	StrikeInitializationThresholdSeconds   uint32
	PricingFrequencySeconds                uint32
	LiquidatorLiquidationPercentage        uint32
	InsuranceVaultLiquidationPercentage    uint32
	NativeTradeFeePercentage               uint64
	NativeUnderlyingFeePercentage          uint64
	NativeWhitelistUnderlyingFeePercentage uint64
	NativeDepositLimit                     uint64
	ExpirationThresholdSeconds             uint32
}

func (obj InitializeStateArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StateNonce` param:
	err = encoder.Encode(obj.StateNonce)
	if err != nil {
		return err
	}
	// Serialize `SerumNonce` param:
	err = encoder.Encode(obj.SerumNonce)
	if err != nil {
		return err
	}
	// Serialize `MintAuthNonce` param:
	err = encoder.Encode(obj.MintAuthNonce)
	if err != nil {
		return err
	}
	// Serialize `ExpiryIntervalSeconds` param:
	err = encoder.Encode(obj.ExpiryIntervalSeconds)
	if err != nil {
		return err
	}
	// Serialize `NewExpiryThresholdSeconds` param:
	err = encoder.Encode(obj.NewExpiryThresholdSeconds)
	if err != nil {
		return err
	}
	// Serialize `StrikeInitializationThresholdSeconds` param:
	err = encoder.Encode(obj.StrikeInitializationThresholdSeconds)
	if err != nil {
		return err
	}
	// Serialize `PricingFrequencySeconds` param:
	err = encoder.Encode(obj.PricingFrequencySeconds)
	if err != nil {
		return err
	}
	// Serialize `LiquidatorLiquidationPercentage` param:
	err = encoder.Encode(obj.LiquidatorLiquidationPercentage)
	if err != nil {
		return err
	}
	// Serialize `InsuranceVaultLiquidationPercentage` param:
	err = encoder.Encode(obj.InsuranceVaultLiquidationPercentage)
	if err != nil {
		return err
	}
	// Serialize `NativeTradeFeePercentage` param:
	err = encoder.Encode(obj.NativeTradeFeePercentage)
	if err != nil {
		return err
	}
	// Serialize `NativeUnderlyingFeePercentage` param:
	err = encoder.Encode(obj.NativeUnderlyingFeePercentage)
	if err != nil {
		return err
	}
	// Serialize `NativeWhitelistUnderlyingFeePercentage` param:
	err = encoder.Encode(obj.NativeWhitelistUnderlyingFeePercentage)
	if err != nil {
		return err
	}
	// Serialize `NativeDepositLimit` param:
	err = encoder.Encode(obj.NativeDepositLimit)
	if err != nil {
		return err
	}
	// Serialize `ExpirationThresholdSeconds` param:
	err = encoder.Encode(obj.ExpirationThresholdSeconds)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeStateArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StateNonce`:
	err = decoder.Decode(&obj.StateNonce)
	if err != nil {
		return err
	}
	// Deserialize `SerumNonce`:
	err = decoder.Decode(&obj.SerumNonce)
	if err != nil {
		return err
	}
	// Deserialize `MintAuthNonce`:
	err = decoder.Decode(&obj.MintAuthNonce)
	if err != nil {
		return err
	}
	// Deserialize `ExpiryIntervalSeconds`:
	err = decoder.Decode(&obj.ExpiryIntervalSeconds)
	if err != nil {
		return err
	}
	// Deserialize `NewExpiryThresholdSeconds`:
	err = decoder.Decode(&obj.NewExpiryThresholdSeconds)
	if err != nil {
		return err
	}
	// Deserialize `StrikeInitializationThresholdSeconds`:
	err = decoder.Decode(&obj.StrikeInitializationThresholdSeconds)
	if err != nil {
		return err
	}
	// Deserialize `PricingFrequencySeconds`:
	err = decoder.Decode(&obj.PricingFrequencySeconds)
	if err != nil {
		return err
	}
	// Deserialize `LiquidatorLiquidationPercentage`:
	err = decoder.Decode(&obj.LiquidatorLiquidationPercentage)
	if err != nil {
		return err
	}
	// Deserialize `InsuranceVaultLiquidationPercentage`:
	err = decoder.Decode(&obj.InsuranceVaultLiquidationPercentage)
	if err != nil {
		return err
	}
	// Deserialize `NativeTradeFeePercentage`:
	err = decoder.Decode(&obj.NativeTradeFeePercentage)
	if err != nil {
		return err
	}
	// Deserialize `NativeUnderlyingFeePercentage`:
	err = decoder.Decode(&obj.NativeUnderlyingFeePercentage)
	if err != nil {
		return err
	}
	// Deserialize `NativeWhitelistUnderlyingFeePercentage`:
	err = decoder.Decode(&obj.NativeWhitelistUnderlyingFeePercentage)
	if err != nil {
		return err
	}
	// Deserialize `NativeDepositLimit`:
	err = decoder.Decode(&obj.NativeDepositLimit)
	if err != nil {
		return err
	}
	// Deserialize `ExpirationThresholdSeconds`:
	err = decoder.Decode(&obj.ExpirationThresholdSeconds)
	if err != nil {
		return err
	}
	return nil
}

type InitializeMarketNodeArgs struct {
	Nonce uint8
	Index uint8
}

func (obj InitializeMarketNodeArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeMarketNodeArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	return nil
}

type OverrideExpiryArgs struct {
	ExpiryIndex uint8
	ActiveTs    uint64
	ExpiryTs    uint64
}

func (obj OverrideExpiryArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ExpiryIndex` param:
	err = encoder.Encode(obj.ExpiryIndex)
	if err != nil {
		return err
	}
	// Serialize `ActiveTs` param:
	err = encoder.Encode(obj.ActiveTs)
	if err != nil {
		return err
	}
	// Serialize `ExpiryTs` param:
	err = encoder.Encode(obj.ExpiryTs)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OverrideExpiryArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ExpiryIndex`:
	err = decoder.Decode(&obj.ExpiryIndex)
	if err != nil {
		return err
	}
	// Deserialize `ActiveTs`:
	err = decoder.Decode(&obj.ActiveTs)
	if err != nil {
		return err
	}
	// Deserialize `ExpiryTs`:
	err = decoder.Decode(&obj.ExpiryTs)
	if err != nil {
		return err
	}
	return nil
}

type UpdateStateArgs struct {
	ExpiryIntervalSeconds                  uint32
	NewExpiryThresholdSeconds              uint32
	StrikeInitializationThresholdSeconds   uint32
	PricingFrequencySeconds                uint32
	LiquidatorLiquidationPercentage        uint32
	InsuranceVaultLiquidationPercentage    uint32
	NativeTradeFeePercentage               uint64
	NativeUnderlyingFeePercentage          uint64
	NativeWhitelistUnderlyingFeePercentage uint64
	NativeDepositLimit                     uint64
	ExpirationThresholdSeconds             uint32
}

func (obj UpdateStateArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ExpiryIntervalSeconds` param:
	err = encoder.Encode(obj.ExpiryIntervalSeconds)
	if err != nil {
		return err
	}
	// Serialize `NewExpiryThresholdSeconds` param:
	err = encoder.Encode(obj.NewExpiryThresholdSeconds)
	if err != nil {
		return err
	}
	// Serialize `StrikeInitializationThresholdSeconds` param:
	err = encoder.Encode(obj.StrikeInitializationThresholdSeconds)
	if err != nil {
		return err
	}
	// Serialize `PricingFrequencySeconds` param:
	err = encoder.Encode(obj.PricingFrequencySeconds)
	if err != nil {
		return err
	}
	// Serialize `LiquidatorLiquidationPercentage` param:
	err = encoder.Encode(obj.LiquidatorLiquidationPercentage)
	if err != nil {
		return err
	}
	// Serialize `InsuranceVaultLiquidationPercentage` param:
	err = encoder.Encode(obj.InsuranceVaultLiquidationPercentage)
	if err != nil {
		return err
	}
	// Serialize `NativeTradeFeePercentage` param:
	err = encoder.Encode(obj.NativeTradeFeePercentage)
	if err != nil {
		return err
	}
	// Serialize `NativeUnderlyingFeePercentage` param:
	err = encoder.Encode(obj.NativeUnderlyingFeePercentage)
	if err != nil {
		return err
	}
	// Serialize `NativeWhitelistUnderlyingFeePercentage` param:
	err = encoder.Encode(obj.NativeWhitelistUnderlyingFeePercentage)
	if err != nil {
		return err
	}
	// Serialize `NativeDepositLimit` param:
	err = encoder.Encode(obj.NativeDepositLimit)
	if err != nil {
		return err
	}
	// Serialize `ExpirationThresholdSeconds` param:
	err = encoder.Encode(obj.ExpirationThresholdSeconds)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UpdateStateArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ExpiryIntervalSeconds`:
	err = decoder.Decode(&obj.ExpiryIntervalSeconds)
	if err != nil {
		return err
	}
	// Deserialize `NewExpiryThresholdSeconds`:
	err = decoder.Decode(&obj.NewExpiryThresholdSeconds)
	if err != nil {
		return err
	}
	// Deserialize `StrikeInitializationThresholdSeconds`:
	err = decoder.Decode(&obj.StrikeInitializationThresholdSeconds)
	if err != nil {
		return err
	}
	// Deserialize `PricingFrequencySeconds`:
	err = decoder.Decode(&obj.PricingFrequencySeconds)
	if err != nil {
		return err
	}
	// Deserialize `LiquidatorLiquidationPercentage`:
	err = decoder.Decode(&obj.LiquidatorLiquidationPercentage)
	if err != nil {
		return err
	}
	// Deserialize `InsuranceVaultLiquidationPercentage`:
	err = decoder.Decode(&obj.InsuranceVaultLiquidationPercentage)
	if err != nil {
		return err
	}
	// Deserialize `NativeTradeFeePercentage`:
	err = decoder.Decode(&obj.NativeTradeFeePercentage)
	if err != nil {
		return err
	}
	// Deserialize `NativeUnderlyingFeePercentage`:
	err = decoder.Decode(&obj.NativeUnderlyingFeePercentage)
	if err != nil {
		return err
	}
	// Deserialize `NativeWhitelistUnderlyingFeePercentage`:
	err = decoder.Decode(&obj.NativeWhitelistUnderlyingFeePercentage)
	if err != nil {
		return err
	}
	// Deserialize `NativeDepositLimit`:
	err = decoder.Decode(&obj.NativeDepositLimit)
	if err != nil {
		return err
	}
	// Deserialize `ExpirationThresholdSeconds`:
	err = decoder.Decode(&obj.ExpirationThresholdSeconds)
	if err != nil {
		return err
	}
	return nil
}

type UpdatePricingParametersArgs struct {
	OptionTradeNormalizer uint64
	FutureTradeNormalizer uint64
	MaxVolatilityRetreat  uint64
	MaxInterestRetreat    uint64
	MinDelta              uint64
	MaxDelta              uint64
	MinInterestRate       int64
	MaxInterestRate       int64
	MinVolatility         uint64
	MaxVolatility         uint64
}

func (obj UpdatePricingParametersArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OptionTradeNormalizer` param:
	err = encoder.Encode(obj.OptionTradeNormalizer)
	if err != nil {
		return err
	}
	// Serialize `FutureTradeNormalizer` param:
	err = encoder.Encode(obj.FutureTradeNormalizer)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityRetreat` param:
	err = encoder.Encode(obj.MaxVolatilityRetreat)
	if err != nil {
		return err
	}
	// Serialize `MaxInterestRetreat` param:
	err = encoder.Encode(obj.MaxInterestRetreat)
	if err != nil {
		return err
	}
	// Serialize `MinDelta` param:
	err = encoder.Encode(obj.MinDelta)
	if err != nil {
		return err
	}
	// Serialize `MaxDelta` param:
	err = encoder.Encode(obj.MaxDelta)
	if err != nil {
		return err
	}
	// Serialize `MinInterestRate` param:
	err = encoder.Encode(obj.MinInterestRate)
	if err != nil {
		return err
	}
	// Serialize `MaxInterestRate` param:
	err = encoder.Encode(obj.MaxInterestRate)
	if err != nil {
		return err
	}
	// Serialize `MinVolatility` param:
	err = encoder.Encode(obj.MinVolatility)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatility` param:
	err = encoder.Encode(obj.MaxVolatility)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UpdatePricingParametersArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OptionTradeNormalizer`:
	err = decoder.Decode(&obj.OptionTradeNormalizer)
	if err != nil {
		return err
	}
	// Deserialize `FutureTradeNormalizer`:
	err = decoder.Decode(&obj.FutureTradeNormalizer)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityRetreat`:
	err = decoder.Decode(&obj.MaxVolatilityRetreat)
	if err != nil {
		return err
	}
	// Deserialize `MaxInterestRetreat`:
	err = decoder.Decode(&obj.MaxInterestRetreat)
	if err != nil {
		return err
	}
	// Deserialize `MinDelta`:
	err = decoder.Decode(&obj.MinDelta)
	if err != nil {
		return err
	}
	// Deserialize `MaxDelta`:
	err = decoder.Decode(&obj.MaxDelta)
	if err != nil {
		return err
	}
	// Deserialize `MinInterestRate`:
	err = decoder.Decode(&obj.MinInterestRate)
	if err != nil {
		return err
	}
	// Deserialize `MaxInterestRate`:
	err = decoder.Decode(&obj.MaxInterestRate)
	if err != nil {
		return err
	}
	// Deserialize `MinVolatility`:
	err = decoder.Decode(&obj.MinVolatility)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatility`:
	err = decoder.Decode(&obj.MaxVolatility)
	if err != nil {
		return err
	}
	return nil
}

type UpdateMarginParametersArgs struct {
	FutureMarginInitial                     uint64
	FutureMarginMaintenance                 uint64
	OptionMarkPercentageLongInitial         uint64
	OptionSpotPercentageLongInitial         uint64
	OptionSpotPercentageShortInitial        uint64
	OptionDynamicPercentageShortInitial     uint64
	OptionMarkPercentageLongMaintenance     uint64
	OptionSpotPercentageLongMaintenance     uint64
	OptionSpotPercentageShortMaintenance    uint64
	OptionDynamicPercentageShortMaintenance uint64
	OptionShortPutCapPercentage             uint64
}

func (obj UpdateMarginParametersArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FutureMarginInitial` param:
	err = encoder.Encode(obj.FutureMarginInitial)
	if err != nil {
		return err
	}
	// Serialize `FutureMarginMaintenance` param:
	err = encoder.Encode(obj.FutureMarginMaintenance)
	if err != nil {
		return err
	}
	// Serialize `OptionMarkPercentageLongInitial` param:
	err = encoder.Encode(obj.OptionMarkPercentageLongInitial)
	if err != nil {
		return err
	}
	// Serialize `OptionSpotPercentageLongInitial` param:
	err = encoder.Encode(obj.OptionSpotPercentageLongInitial)
	if err != nil {
		return err
	}
	// Serialize `OptionSpotPercentageShortInitial` param:
	err = encoder.Encode(obj.OptionSpotPercentageShortInitial)
	if err != nil {
		return err
	}
	// Serialize `OptionDynamicPercentageShortInitial` param:
	err = encoder.Encode(obj.OptionDynamicPercentageShortInitial)
	if err != nil {
		return err
	}
	// Serialize `OptionMarkPercentageLongMaintenance` param:
	err = encoder.Encode(obj.OptionMarkPercentageLongMaintenance)
	if err != nil {
		return err
	}
	// Serialize `OptionSpotPercentageLongMaintenance` param:
	err = encoder.Encode(obj.OptionSpotPercentageLongMaintenance)
	if err != nil {
		return err
	}
	// Serialize `OptionSpotPercentageShortMaintenance` param:
	err = encoder.Encode(obj.OptionSpotPercentageShortMaintenance)
	if err != nil {
		return err
	}
	// Serialize `OptionDynamicPercentageShortMaintenance` param:
	err = encoder.Encode(obj.OptionDynamicPercentageShortMaintenance)
	if err != nil {
		return err
	}
	// Serialize `OptionShortPutCapPercentage` param:
	err = encoder.Encode(obj.OptionShortPutCapPercentage)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UpdateMarginParametersArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FutureMarginInitial`:
	err = decoder.Decode(&obj.FutureMarginInitial)
	if err != nil {
		return err
	}
	// Deserialize `FutureMarginMaintenance`:
	err = decoder.Decode(&obj.FutureMarginMaintenance)
	if err != nil {
		return err
	}
	// Deserialize `OptionMarkPercentageLongInitial`:
	err = decoder.Decode(&obj.OptionMarkPercentageLongInitial)
	if err != nil {
		return err
	}
	// Deserialize `OptionSpotPercentageLongInitial`:
	err = decoder.Decode(&obj.OptionSpotPercentageLongInitial)
	if err != nil {
		return err
	}
	// Deserialize `OptionSpotPercentageShortInitial`:
	err = decoder.Decode(&obj.OptionSpotPercentageShortInitial)
	if err != nil {
		return err
	}
	// Deserialize `OptionDynamicPercentageShortInitial`:
	err = decoder.Decode(&obj.OptionDynamicPercentageShortInitial)
	if err != nil {
		return err
	}
	// Deserialize `OptionMarkPercentageLongMaintenance`:
	err = decoder.Decode(&obj.OptionMarkPercentageLongMaintenance)
	if err != nil {
		return err
	}
	// Deserialize `OptionSpotPercentageLongMaintenance`:
	err = decoder.Decode(&obj.OptionSpotPercentageLongMaintenance)
	if err != nil {
		return err
	}
	// Deserialize `OptionSpotPercentageShortMaintenance`:
	err = decoder.Decode(&obj.OptionSpotPercentageShortMaintenance)
	if err != nil {
		return err
	}
	// Deserialize `OptionDynamicPercentageShortMaintenance`:
	err = decoder.Decode(&obj.OptionDynamicPercentageShortMaintenance)
	if err != nil {
		return err
	}
	// Deserialize `OptionShortPutCapPercentage`:
	err = decoder.Decode(&obj.OptionShortPutCapPercentage)
	if err != nil {
		return err
	}
	return nil
}

type InitializeZetaGroupArgs struct {
	ZetaGroupNonce                          uint8
	UnderlyingNonce                         uint8
	GreeksNonce                             uint8
	VaultNonce                              uint8
	InsuranceVaultNonce                     uint8
	SocializedLossAccountNonce              uint8
	InterestRate                            int64
	Volatility                              [5]uint64
	OptionTradeNormalizer                   uint64
	FutureTradeNormalizer                   uint64
	MaxVolatilityRetreat                    uint64
	MaxInterestRetreat                      uint64
	MaxDelta                                uint64
	MinDelta                                uint64
	MinInterestRate                         int64
	MaxInterestRate                         int64
	MinVolatility                           uint64
	MaxVolatility                           uint64
	FutureMarginInitial                     uint64
	FutureMarginMaintenance                 uint64
	OptionMarkPercentageLongInitial         uint64
	OptionSpotPercentageLongInitial         uint64
	OptionSpotPercentageShortInitial        uint64
	OptionDynamicPercentageShortInitial     uint64
	OptionMarkPercentageLongMaintenance     uint64
	OptionSpotPercentageLongMaintenance     uint64
	OptionSpotPercentageShortMaintenance    uint64
	OptionDynamicPercentageShortMaintenance uint64
	OptionShortPutCapPercentage             uint64
}

func (obj InitializeZetaGroupArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ZetaGroupNonce` param:
	err = encoder.Encode(obj.ZetaGroupNonce)
	if err != nil {
		return err
	}
	// Serialize `UnderlyingNonce` param:
	err = encoder.Encode(obj.UnderlyingNonce)
	if err != nil {
		return err
	}
	// Serialize `GreeksNonce` param:
	err = encoder.Encode(obj.GreeksNonce)
	if err != nil {
		return err
	}
	// Serialize `VaultNonce` param:
	err = encoder.Encode(obj.VaultNonce)
	if err != nil {
		return err
	}
	// Serialize `InsuranceVaultNonce` param:
	err = encoder.Encode(obj.InsuranceVaultNonce)
	if err != nil {
		return err
	}
	// Serialize `SocializedLossAccountNonce` param:
	err = encoder.Encode(obj.SocializedLossAccountNonce)
	if err != nil {
		return err
	}
	// Serialize `InterestRate` param:
	err = encoder.Encode(obj.InterestRate)
	if err != nil {
		return err
	}
	// Serialize `Volatility` param:
	err = encoder.Encode(obj.Volatility)
	if err != nil {
		return err
	}
	// Serialize `OptionTradeNormalizer` param:
	err = encoder.Encode(obj.OptionTradeNormalizer)
	if err != nil {
		return err
	}
	// Serialize `FutureTradeNormalizer` param:
	err = encoder.Encode(obj.FutureTradeNormalizer)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityRetreat` param:
	err = encoder.Encode(obj.MaxVolatilityRetreat)
	if err != nil {
		return err
	}
	// Serialize `MaxInterestRetreat` param:
	err = encoder.Encode(obj.MaxInterestRetreat)
	if err != nil {
		return err
	}
	// Serialize `MaxDelta` param:
	err = encoder.Encode(obj.MaxDelta)
	if err != nil {
		return err
	}
	// Serialize `MinDelta` param:
	err = encoder.Encode(obj.MinDelta)
	if err != nil {
		return err
	}
	// Serialize `MinInterestRate` param:
	err = encoder.Encode(obj.MinInterestRate)
	if err != nil {
		return err
	}
	// Serialize `MaxInterestRate` param:
	err = encoder.Encode(obj.MaxInterestRate)
	if err != nil {
		return err
	}
	// Serialize `MinVolatility` param:
	err = encoder.Encode(obj.MinVolatility)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatility` param:
	err = encoder.Encode(obj.MaxVolatility)
	if err != nil {
		return err
	}
	// Serialize `FutureMarginInitial` param:
	err = encoder.Encode(obj.FutureMarginInitial)
	if err != nil {
		return err
	}
	// Serialize `FutureMarginMaintenance` param:
	err = encoder.Encode(obj.FutureMarginMaintenance)
	if err != nil {
		return err
	}
	// Serialize `OptionMarkPercentageLongInitial` param:
	err = encoder.Encode(obj.OptionMarkPercentageLongInitial)
	if err != nil {
		return err
	}
	// Serialize `OptionSpotPercentageLongInitial` param:
	err = encoder.Encode(obj.OptionSpotPercentageLongInitial)
	if err != nil {
		return err
	}
	// Serialize `OptionSpotPercentageShortInitial` param:
	err = encoder.Encode(obj.OptionSpotPercentageShortInitial)
	if err != nil {
		return err
	}
	// Serialize `OptionDynamicPercentageShortInitial` param:
	err = encoder.Encode(obj.OptionDynamicPercentageShortInitial)
	if err != nil {
		return err
	}
	// Serialize `OptionMarkPercentageLongMaintenance` param:
	err = encoder.Encode(obj.OptionMarkPercentageLongMaintenance)
	if err != nil {
		return err
	}
	// Serialize `OptionSpotPercentageLongMaintenance` param:
	err = encoder.Encode(obj.OptionSpotPercentageLongMaintenance)
	if err != nil {
		return err
	}
	// Serialize `OptionSpotPercentageShortMaintenance` param:
	err = encoder.Encode(obj.OptionSpotPercentageShortMaintenance)
	if err != nil {
		return err
	}
	// Serialize `OptionDynamicPercentageShortMaintenance` param:
	err = encoder.Encode(obj.OptionDynamicPercentageShortMaintenance)
	if err != nil {
		return err
	}
	// Serialize `OptionShortPutCapPercentage` param:
	err = encoder.Encode(obj.OptionShortPutCapPercentage)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeZetaGroupArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ZetaGroupNonce`:
	err = decoder.Decode(&obj.ZetaGroupNonce)
	if err != nil {
		return err
	}
	// Deserialize `UnderlyingNonce`:
	err = decoder.Decode(&obj.UnderlyingNonce)
	if err != nil {
		return err
	}
	// Deserialize `GreeksNonce`:
	err = decoder.Decode(&obj.GreeksNonce)
	if err != nil {
		return err
	}
	// Deserialize `VaultNonce`:
	err = decoder.Decode(&obj.VaultNonce)
	if err != nil {
		return err
	}
	// Deserialize `InsuranceVaultNonce`:
	err = decoder.Decode(&obj.InsuranceVaultNonce)
	if err != nil {
		return err
	}
	// Deserialize `SocializedLossAccountNonce`:
	err = decoder.Decode(&obj.SocializedLossAccountNonce)
	if err != nil {
		return err
	}
	// Deserialize `InterestRate`:
	err = decoder.Decode(&obj.InterestRate)
	if err != nil {
		return err
	}
	// Deserialize `Volatility`:
	err = decoder.Decode(&obj.Volatility)
	if err != nil {
		return err
	}
	// Deserialize `OptionTradeNormalizer`:
	err = decoder.Decode(&obj.OptionTradeNormalizer)
	if err != nil {
		return err
	}
	// Deserialize `FutureTradeNormalizer`:
	err = decoder.Decode(&obj.FutureTradeNormalizer)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityRetreat`:
	err = decoder.Decode(&obj.MaxVolatilityRetreat)
	if err != nil {
		return err
	}
	// Deserialize `MaxInterestRetreat`:
	err = decoder.Decode(&obj.MaxInterestRetreat)
	if err != nil {
		return err
	}
	// Deserialize `MaxDelta`:
	err = decoder.Decode(&obj.MaxDelta)
	if err != nil {
		return err
	}
	// Deserialize `MinDelta`:
	err = decoder.Decode(&obj.MinDelta)
	if err != nil {
		return err
	}
	// Deserialize `MinInterestRate`:
	err = decoder.Decode(&obj.MinInterestRate)
	if err != nil {
		return err
	}
	// Deserialize `MaxInterestRate`:
	err = decoder.Decode(&obj.MaxInterestRate)
	if err != nil {
		return err
	}
	// Deserialize `MinVolatility`:
	err = decoder.Decode(&obj.MinVolatility)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatility`:
	err = decoder.Decode(&obj.MaxVolatility)
	if err != nil {
		return err
	}
	// Deserialize `FutureMarginInitial`:
	err = decoder.Decode(&obj.FutureMarginInitial)
	if err != nil {
		return err
	}
	// Deserialize `FutureMarginMaintenance`:
	err = decoder.Decode(&obj.FutureMarginMaintenance)
	if err != nil {
		return err
	}
	// Deserialize `OptionMarkPercentageLongInitial`:
	err = decoder.Decode(&obj.OptionMarkPercentageLongInitial)
	if err != nil {
		return err
	}
	// Deserialize `OptionSpotPercentageLongInitial`:
	err = decoder.Decode(&obj.OptionSpotPercentageLongInitial)
	if err != nil {
		return err
	}
	// Deserialize `OptionSpotPercentageShortInitial`:
	err = decoder.Decode(&obj.OptionSpotPercentageShortInitial)
	if err != nil {
		return err
	}
	// Deserialize `OptionDynamicPercentageShortInitial`:
	err = decoder.Decode(&obj.OptionDynamicPercentageShortInitial)
	if err != nil {
		return err
	}
	// Deserialize `OptionMarkPercentageLongMaintenance`:
	err = decoder.Decode(&obj.OptionMarkPercentageLongMaintenance)
	if err != nil {
		return err
	}
	// Deserialize `OptionSpotPercentageLongMaintenance`:
	err = decoder.Decode(&obj.OptionSpotPercentageLongMaintenance)
	if err != nil {
		return err
	}
	// Deserialize `OptionSpotPercentageShortMaintenance`:
	err = decoder.Decode(&obj.OptionSpotPercentageShortMaintenance)
	if err != nil {
		return err
	}
	// Deserialize `OptionDynamicPercentageShortMaintenance`:
	err = decoder.Decode(&obj.OptionDynamicPercentageShortMaintenance)
	if err != nil {
		return err
	}
	// Deserialize `OptionShortPutCapPercentage`:
	err = decoder.Decode(&obj.OptionShortPutCapPercentage)
	if err != nil {
		return err
	}
	return nil
}

type UpdateGreeksArgs struct {
	Index      uint8
	Theo       uint64
	Delta      uint32
	Gamma      uint32
	Volatility uint32
}

func (obj UpdateGreeksArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Theo` param:
	err = encoder.Encode(obj.Theo)
	if err != nil {
		return err
	}
	// Serialize `Delta` param:
	err = encoder.Encode(obj.Delta)
	if err != nil {
		return err
	}
	// Serialize `Gamma` param:
	err = encoder.Encode(obj.Gamma)
	if err != nil {
		return err
	}
	// Serialize `Volatility` param:
	err = encoder.Encode(obj.Volatility)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UpdateGreeksArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Theo`:
	err = decoder.Decode(&obj.Theo)
	if err != nil {
		return err
	}
	// Deserialize `Delta`:
	err = decoder.Decode(&obj.Delta)
	if err != nil {
		return err
	}
	// Deserialize `Gamma`:
	err = decoder.Decode(&obj.Gamma)
	if err != nil {
		return err
	}
	// Deserialize `Volatility`:
	err = decoder.Decode(&obj.Volatility)
	if err != nil {
		return err
	}
	return nil
}

type ExpirySeriesStatus ag_binary.BorshEnum

const (
	ExpirySeriesStatusUninitialized ExpirySeriesStatus = iota
	ExpirySeriesStatusInitialized
	ExpirySeriesStatusLive
	ExpirySeriesStatusExpired
	ExpirySeriesStatusExpiredDirty
)

func (value ExpirySeriesStatus) String() string {
	switch value {
	case ExpirySeriesStatusUninitialized:
		return "Uninitialized"
	case ExpirySeriesStatusInitialized:
		return "Initialized"
	case ExpirySeriesStatusLive:
		return "Live"
	case ExpirySeriesStatusExpired:
		return "Expired"
	case ExpirySeriesStatusExpiredDirty:
		return "ExpiredDirty"
	default:
		return ""
	}
}

type Kind ag_binary.BorshEnum

const (
	KindUninitialized Kind = iota
	KindCall
	KindPut
	KindFuture
)

func (value Kind) String() string {
	switch value {
	case KindUninitialized:
		return "Uninitialized"
	case KindCall:
		return "Call"
	case KindPut:
		return "Put"
	case KindFuture:
		return "Future"
	default:
		return ""
	}
}

type Side ag_binary.BorshEnum

const (
	SideUninitialized Side = iota
	SideBid
	SideAsk
)

func (value Side) String() string {
	switch value {
	case SideUninitialized:
		return "Uninitialized"
	case SideBid:
		return "Bid"
	case SideAsk:
		return "Ask"
	default:
		return ""
	}
}

type MarginRequirement ag_binary.BorshEnum

const (
	MarginRequirementInitial MarginRequirement = iota
	MarginRequirementMaintenance
)

func (value MarginRequirement) String() string {
	switch value {
	case MarginRequirementInitial:
		return "Initial"
	case MarginRequirementMaintenance:
		return "Maintenance"
	default:
		return ""
	}
}
