// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package zeta

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SettlePositions is the `settlePositions` instruction.
type SettlePositions struct {
	ExpiryTs        *uint64
	SettlementNonce *uint8

	// [0] = [] zetaGroup
	//
	// [1] = [] settlementAccount
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSettlePositionsInstructionBuilder creates a new `SettlePositions` instruction builder.
func NewSettlePositionsInstructionBuilder() *SettlePositions {
	nd := &SettlePositions{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetExpiryTs sets the "expiryTs" parameter.
func (inst *SettlePositions) SetExpiryTs(expiryTs uint64) *SettlePositions {
	inst.ExpiryTs = &expiryTs
	return inst
}

// SetSettlementNonce sets the "settlementNonce" parameter.
func (inst *SettlePositions) SetSettlementNonce(settlementNonce uint8) *SettlePositions {
	inst.SettlementNonce = &settlementNonce
	return inst
}

// SetZetaGroupAccount sets the "zetaGroup" account.
func (inst *SettlePositions) SetZetaGroupAccount(zetaGroup ag_solanago.PublicKey) *SettlePositions {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(zetaGroup)
	return inst
}

// GetZetaGroupAccount gets the "zetaGroup" account.
func (inst *SettlePositions) GetZetaGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSettlementAccountAccount sets the "settlementAccount" account.
func (inst *SettlePositions) SetSettlementAccountAccount(settlementAccount ag_solanago.PublicKey) *SettlePositions {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(settlementAccount)
	return inst
}

// GetSettlementAccountAccount gets the "settlementAccount" account.
func (inst *SettlePositions) GetSettlementAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst SettlePositions) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SettlePositions,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SettlePositions) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SettlePositions) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ExpiryTs == nil {
			return errors.New("ExpiryTs parameter is not set")
		}
		if inst.SettlementNonce == nil {
			return errors.New("SettlementNonce parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.ZetaGroup is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SettlementAccount is not set")
		}
	}
	return nil
}

func (inst *SettlePositions) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SettlePositions")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("       ExpiryTs", *inst.ExpiryTs))
						paramsBranch.Child(ag_format.Param("SettlementNonce", *inst.SettlementNonce))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" zetaGroup", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("settlement", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj SettlePositions) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ExpiryTs` param:
	err = encoder.Encode(obj.ExpiryTs)
	if err != nil {
		return err
	}
	// Serialize `SettlementNonce` param:
	err = encoder.Encode(obj.SettlementNonce)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SettlePositions) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ExpiryTs`:
	err = decoder.Decode(&obj.ExpiryTs)
	if err != nil {
		return err
	}
	// Deserialize `SettlementNonce`:
	err = decoder.Decode(&obj.SettlementNonce)
	if err != nil {
		return err
	}
	return nil
}

// NewSettlePositionsInstruction declares a new SettlePositions instruction with the provided parameters and accounts.
func NewSettlePositionsInstruction(
	// Parameters:
	expiryTs uint64,
	settlementNonce uint8,
	// Accounts:
	zetaGroup ag_solanago.PublicKey,
	settlementAccount ag_solanago.PublicKey) *SettlePositions {
	return NewSettlePositionsInstructionBuilder().
		SetExpiryTs(expiryTs).
		SetSettlementNonce(settlementNonce).
		SetZetaGroupAccount(zetaGroup).
		SetSettlementAccountAccount(settlementAccount)
}
