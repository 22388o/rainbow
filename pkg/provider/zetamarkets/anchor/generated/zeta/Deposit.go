// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package zeta

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Deposit is the `deposit` instruction.
type Deposit struct {
	Amount *uint64

	// [0] = [] zetaGroup
	//
	// [1] = [WRITE] marginAccount
	//
	// [2] = [WRITE] vault
	//
	// [3] = [WRITE] userTokenAccount
	//
	// [4] = [WRITE] socializedLossAccount
	//
	// [5] = [SIGNER] authority
	//
	// [6] = [] tokenProgram
	//
	// [7] = [] state
	//
	// [8] = [] greeks
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDepositInstructionBuilder creates a new `Deposit` instruction builder.
func NewDepositInstructionBuilder() *Deposit {
	nd := &Deposit{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *Deposit) SetAmount(amount uint64) *Deposit {
	inst.Amount = &amount
	return inst
}

// SetZetaGroupAccount sets the "zetaGroup" account.
func (inst *Deposit) SetZetaGroupAccount(zetaGroup ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(zetaGroup)
	return inst
}

// GetZetaGroupAccount gets the "zetaGroup" account.
func (inst *Deposit) GetZetaGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMarginAccountAccount sets the "marginAccount" account.
func (inst *Deposit) SetMarginAccountAccount(marginAccount ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(marginAccount).WRITE()
	return inst
}

// GetMarginAccountAccount gets the "marginAccount" account.
func (inst *Deposit) GetMarginAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetVaultAccount sets the "vault" account.
func (inst *Deposit) SetVaultAccount(vault ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
func (inst *Deposit) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserTokenAccountAccount sets the "userTokenAccount" account.
func (inst *Deposit) SetUserTokenAccountAccount(userTokenAccount ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(userTokenAccount).WRITE()
	return inst
}

// GetUserTokenAccountAccount gets the "userTokenAccount" account.
func (inst *Deposit) GetUserTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSocializedLossAccountAccount sets the "socializedLossAccount" account.
func (inst *Deposit) SetSocializedLossAccountAccount(socializedLossAccount ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(socializedLossAccount).WRITE()
	return inst
}

// GetSocializedLossAccountAccount gets the "socializedLossAccount" account.
func (inst *Deposit) GetSocializedLossAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *Deposit) SetAuthorityAccount(authority ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *Deposit) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Deposit) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Deposit) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetStateAccount sets the "state" account.
func (inst *Deposit) SetStateAccount(state ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *Deposit) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetGreeksAccount sets the "greeks" account.
func (inst *Deposit) SetGreeksAccount(greeks ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(greeks)
	return inst
}

// GetGreeksAccount gets the "greeks" account.
func (inst *Deposit) GetGreeksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst Deposit) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Deposit,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Deposit) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Deposit) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.ZetaGroup is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MarginAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UserTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SocializedLossAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Greeks is not set")
		}
	}
	return nil
}

func (inst *Deposit) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Deposit")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Amount", *inst.Amount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     zetaGroup", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        margin", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         vault", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     userToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("socializedLoss", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("     authority", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("  tokenProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("         state", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        greeks", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj Deposit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Deposit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

// NewDepositInstruction declares a new Deposit instruction with the provided parameters and accounts.
func NewDepositInstruction(
	// Parameters:
	amount uint64,
	// Accounts:
	zetaGroup ag_solanago.PublicKey,
	marginAccount ag_solanago.PublicKey,
	vault ag_solanago.PublicKey,
	userTokenAccount ag_solanago.PublicKey,
	socializedLossAccount ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	state ag_solanago.PublicKey,
	greeks ag_solanago.PublicKey) *Deposit {
	return NewDepositInstructionBuilder().
		SetAmount(amount).
		SetZetaGroupAccount(zetaGroup).
		SetMarginAccountAccount(marginAccount).
		SetVaultAccount(vault).
		SetUserTokenAccountAccount(userTokenAccount).
		SetSocializedLossAccountAccount(socializedLossAccount).
		SetAuthorityAccount(authority).
		SetTokenProgramAccount(tokenProgram).
		SetStateAccount(state).
		SetGreeksAccount(greeks)
}
