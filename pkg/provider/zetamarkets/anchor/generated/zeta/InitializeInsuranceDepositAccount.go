// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package zeta

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeInsuranceDepositAccount is the `initializeInsuranceDepositAccount` instruction.
type InitializeInsuranceDepositAccount struct {
	Nonce *uint8

	// [0] = [] zetaGroup
	//
	// [1] = [WRITE] insuranceDepositAccount
	//
	// [2] = [WRITE, SIGNER] authority
	//
	// [3] = [] systemProgram
	//
	// [4] = [] whitelistInsuranceAccount
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeInsuranceDepositAccountInstructionBuilder creates a new `InitializeInsuranceDepositAccount` instruction builder.
func NewInitializeInsuranceDepositAccountInstructionBuilder() *InitializeInsuranceDepositAccount {
	nd := &InitializeInsuranceDepositAccount{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetNonce sets the "nonce" parameter.
func (inst *InitializeInsuranceDepositAccount) SetNonce(nonce uint8) *InitializeInsuranceDepositAccount {
	inst.Nonce = &nonce
	return inst
}

// SetZetaGroupAccount sets the "zetaGroup" account.
func (inst *InitializeInsuranceDepositAccount) SetZetaGroupAccount(zetaGroup ag_solanago.PublicKey) *InitializeInsuranceDepositAccount {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(zetaGroup)
	return inst
}

// GetZetaGroupAccount gets the "zetaGroup" account.
func (inst *InitializeInsuranceDepositAccount) GetZetaGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetInsuranceDepositAccountAccount sets the "insuranceDepositAccount" account.
func (inst *InitializeInsuranceDepositAccount) SetInsuranceDepositAccountAccount(insuranceDepositAccount ag_solanago.PublicKey) *InitializeInsuranceDepositAccount {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(insuranceDepositAccount).WRITE()
	return inst
}

// GetInsuranceDepositAccountAccount gets the "insuranceDepositAccount" account.
func (inst *InitializeInsuranceDepositAccount) GetInsuranceDepositAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *InitializeInsuranceDepositAccount) SetAuthorityAccount(authority ag_solanago.PublicKey) *InitializeInsuranceDepositAccount {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).WRITE().SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *InitializeInsuranceDepositAccount) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializeInsuranceDepositAccount) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeInsuranceDepositAccount {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializeInsuranceDepositAccount) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetWhitelistInsuranceAccountAccount sets the "whitelistInsuranceAccount" account.
func (inst *InitializeInsuranceDepositAccount) SetWhitelistInsuranceAccountAccount(whitelistInsuranceAccount ag_solanago.PublicKey) *InitializeInsuranceDepositAccount {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(whitelistInsuranceAccount)
	return inst
}

// GetWhitelistInsuranceAccountAccount gets the "whitelistInsuranceAccount" account.
func (inst *InitializeInsuranceDepositAccount) GetWhitelistInsuranceAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst InitializeInsuranceDepositAccount) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeInsuranceDepositAccount,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeInsuranceDepositAccount) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeInsuranceDepositAccount) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Nonce == nil {
			return errors.New("Nonce parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.ZetaGroup is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.InsuranceDepositAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.WhitelistInsuranceAccount is not set")
		}
	}
	return nil
}

func (inst *InitializeInsuranceDepositAccount) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeInsuranceDepositAccount")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Nonce", *inst.Nonce))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         zetaGroup", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  insuranceDeposit", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     systemProgram", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("whitelistInsurance", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj InitializeInsuranceDepositAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeInsuranceDepositAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeInsuranceDepositAccountInstruction declares a new InitializeInsuranceDepositAccount instruction with the provided parameters and accounts.
func NewInitializeInsuranceDepositAccountInstruction(
	// Parameters:
	nonce uint8,
	// Accounts:
	zetaGroup ag_solanago.PublicKey,
	insuranceDepositAccount ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	whitelistInsuranceAccount ag_solanago.PublicKey) *InitializeInsuranceDepositAccount {
	return NewInitializeInsuranceDepositAccountInstructionBuilder().
		SetNonce(nonce).
		SetZetaGroupAccount(zetaGroup).
		SetInsuranceDepositAccountAccount(insuranceDepositAccount).
		SetAuthorityAccount(authority).
		SetSystemProgramAccount(systemProgram).
		SetWhitelistInsuranceAccountAccount(whitelistInsuranceAccount)
}
