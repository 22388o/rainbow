// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package zeta

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ForceCancelOrders is the `forceCancelOrders` instruction.
type ForceCancelOrders struct {

	// [0] = [WRITE] greeks
	//
	// [1] = [] oracle
	//
	// ····· cancelAccounts: [2] = [] zetaGroup
	//
	// ····················· [3] = [] state
	//
	// ····················· [4] = [WRITE] marginAccount
	//
	// ····················· [5] = [] dexProgram
	//
	// ····················· [6] = [] serumAuthority
	//
	// ····················· [7] = [WRITE] openOrders
	//
	// ····················· [8] = [WRITE] market
	//
	// ····················· [9] = [WRITE] bids
	//
	// ····················· [10] = [WRITE] asks
	//
	// ····················· [11] = [WRITE] eventQueue
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewForceCancelOrdersInstructionBuilder creates a new `ForceCancelOrders` instruction builder.
func NewForceCancelOrdersInstructionBuilder() *ForceCancelOrders {
	nd := &ForceCancelOrders{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetGreeksAccount sets the "greeks" account.
func (inst *ForceCancelOrders) SetGreeksAccount(greeks ag_solanago.PublicKey) *ForceCancelOrders {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(greeks).WRITE()
	return inst
}

// GetGreeksAccount gets the "greeks" account.
func (inst *ForceCancelOrders) GetGreeksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOracleAccount sets the "oracle" account.
func (inst *ForceCancelOrders) SetOracleAccount(oracle ag_solanago.PublicKey) *ForceCancelOrders {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(oracle)
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *ForceCancelOrders) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

type ForceCancelOrdersCancelAccountsAccountsBuilder struct {
	ag_solanago.AccountMetaSlice `bin:"-"`
}

func NewForceCancelOrdersCancelAccountsAccountsBuilder() *ForceCancelOrdersCancelAccountsAccountsBuilder {
	return &ForceCancelOrdersCancelAccountsAccountsBuilder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
}

func (inst *ForceCancelOrders) SetCancelAccountsAccountsFromBuilder(forceCancelOrdersCancelAccountsAccountsBuilder *ForceCancelOrdersCancelAccountsAccountsBuilder) *ForceCancelOrders {
	inst.AccountMetaSlice[2] = forceCancelOrdersCancelAccountsAccountsBuilder.GetZetaGroupAccount()
	inst.AccountMetaSlice[3] = forceCancelOrdersCancelAccountsAccountsBuilder.GetStateAccount()
	inst.AccountMetaSlice[4] = forceCancelOrdersCancelAccountsAccountsBuilder.GetMarginAccountAccount()
	inst.AccountMetaSlice[5] = forceCancelOrdersCancelAccountsAccountsBuilder.GetDexProgramAccount()
	inst.AccountMetaSlice[6] = forceCancelOrdersCancelAccountsAccountsBuilder.GetSerumAuthorityAccount()
	inst.AccountMetaSlice[7] = forceCancelOrdersCancelAccountsAccountsBuilder.GetOpenOrdersAccount()
	inst.AccountMetaSlice[8] = forceCancelOrdersCancelAccountsAccountsBuilder.GetMarketAccount()
	inst.AccountMetaSlice[9] = forceCancelOrdersCancelAccountsAccountsBuilder.GetBidsAccount()
	inst.AccountMetaSlice[10] = forceCancelOrdersCancelAccountsAccountsBuilder.GetAsksAccount()
	inst.AccountMetaSlice[11] = forceCancelOrdersCancelAccountsAccountsBuilder.GetEventQueueAccount()
	return inst
}

// SetZetaGroupAccount sets the "zetaGroup" account.
func (inst *ForceCancelOrdersCancelAccountsAccountsBuilder) SetZetaGroupAccount(zetaGroup ag_solanago.PublicKey) *ForceCancelOrdersCancelAccountsAccountsBuilder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(zetaGroup)
	return inst
}

// GetZetaGroupAccount gets the "zetaGroup" account.
func (inst *ForceCancelOrdersCancelAccountsAccountsBuilder) GetZetaGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStateAccount sets the "state" account.
func (inst *ForceCancelOrdersCancelAccountsAccountsBuilder) SetStateAccount(state ag_solanago.PublicKey) *ForceCancelOrdersCancelAccountsAccountsBuilder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *ForceCancelOrdersCancelAccountsAccountsBuilder) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMarginAccountAccount sets the "marginAccount" account.
func (inst *ForceCancelOrdersCancelAccountsAccountsBuilder) SetMarginAccountAccount(marginAccount ag_solanago.PublicKey) *ForceCancelOrdersCancelAccountsAccountsBuilder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(marginAccount).WRITE()
	return inst
}

// GetMarginAccountAccount gets the "marginAccount" account.
func (inst *ForceCancelOrdersCancelAccountsAccountsBuilder) GetMarginAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetDexProgramAccount sets the "dexProgram" account.
func (inst *ForceCancelOrdersCancelAccountsAccountsBuilder) SetDexProgramAccount(dexProgram ag_solanago.PublicKey) *ForceCancelOrdersCancelAccountsAccountsBuilder {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(dexProgram)
	return inst
}

// GetDexProgramAccount gets the "dexProgram" account.
func (inst *ForceCancelOrdersCancelAccountsAccountsBuilder) GetDexProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSerumAuthorityAccount sets the "serumAuthority" account.
func (inst *ForceCancelOrdersCancelAccountsAccountsBuilder) SetSerumAuthorityAccount(serumAuthority ag_solanago.PublicKey) *ForceCancelOrdersCancelAccountsAccountsBuilder {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(serumAuthority)
	return inst
}

// GetSerumAuthorityAccount gets the "serumAuthority" account.
func (inst *ForceCancelOrdersCancelAccountsAccountsBuilder) GetSerumAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetOpenOrdersAccount sets the "openOrders" account.
func (inst *ForceCancelOrdersCancelAccountsAccountsBuilder) SetOpenOrdersAccount(openOrders ag_solanago.PublicKey) *ForceCancelOrdersCancelAccountsAccountsBuilder {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(openOrders).WRITE()
	return inst
}

// GetOpenOrdersAccount gets the "openOrders" account.
func (inst *ForceCancelOrdersCancelAccountsAccountsBuilder) GetOpenOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetMarketAccount sets the "market" account.
func (inst *ForceCancelOrdersCancelAccountsAccountsBuilder) SetMarketAccount(market ag_solanago.PublicKey) *ForceCancelOrdersCancelAccountsAccountsBuilder {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(market).WRITE()
	return inst
}

// GetMarketAccount gets the "market" account.
func (inst *ForceCancelOrdersCancelAccountsAccountsBuilder) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetBidsAccount sets the "bids" account.
func (inst *ForceCancelOrdersCancelAccountsAccountsBuilder) SetBidsAccount(bids ag_solanago.PublicKey) *ForceCancelOrdersCancelAccountsAccountsBuilder {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(bids).WRITE()
	return inst
}

// GetBidsAccount gets the "bids" account.
func (inst *ForceCancelOrdersCancelAccountsAccountsBuilder) GetBidsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAsksAccount sets the "asks" account.
func (inst *ForceCancelOrdersCancelAccountsAccountsBuilder) SetAsksAccount(asks ag_solanago.PublicKey) *ForceCancelOrdersCancelAccountsAccountsBuilder {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(asks).WRITE()
	return inst
}

// GetAsksAccount gets the "asks" account.
func (inst *ForceCancelOrdersCancelAccountsAccountsBuilder) GetAsksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetEventQueueAccount sets the "eventQueue" account.
func (inst *ForceCancelOrdersCancelAccountsAccountsBuilder) SetEventQueueAccount(eventQueue ag_solanago.PublicKey) *ForceCancelOrdersCancelAccountsAccountsBuilder {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(eventQueue).WRITE()
	return inst
}

// GetEventQueueAccount gets the "eventQueue" account.
func (inst *ForceCancelOrdersCancelAccountsAccountsBuilder) GetEventQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst ForceCancelOrders) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ForceCancelOrders,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ForceCancelOrders) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ForceCancelOrders) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Greeks is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.CancelAccountsZetaGroup is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.CancelAccountsState is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.CancelAccountsMarginAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.CancelAccountsDexProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.CancelAccountsSerumAuthority is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.CancelAccountsOpenOrders is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.CancelAccountsMarket is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.CancelAccountsBids is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.CancelAccountsAsks is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.CancelAccountsEventQueue is not set")
		}
	}
	return nil
}

func (inst *ForceCancelOrders) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ForceCancelOrders")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                       greeks", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                       oracle", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     cancelAccounts/zetaGroup", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         cancelAccounts/state", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        cancelAccounts/margin", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("    cancelAccounts/dexProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("cancelAccounts/serumAuthority", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("    cancelAccounts/openOrders", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        cancelAccounts/market", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("          cancelAccounts/bids", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("          cancelAccounts/asks", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("    cancelAccounts/eventQueue", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj ForceCancelOrders) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *ForceCancelOrders) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewForceCancelOrdersInstruction declares a new ForceCancelOrders instruction with the provided parameters and accounts.
func NewForceCancelOrdersInstruction(
	// Accounts:
	greeks ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	cancelAccountsZetaGroup ag_solanago.PublicKey,
	cancelAccountsState ag_solanago.PublicKey,
	cancelAccountsMarginAccount ag_solanago.PublicKey,
	cancelAccountsDexProgram ag_solanago.PublicKey,
	cancelAccountsSerumAuthority ag_solanago.PublicKey,
	cancelAccountsOpenOrders ag_solanago.PublicKey,
	cancelAccountsMarket ag_solanago.PublicKey,
	cancelAccountsBids ag_solanago.PublicKey,
	cancelAccountsAsks ag_solanago.PublicKey,
	cancelAccountsEventQueue ag_solanago.PublicKey) *ForceCancelOrders {
	return NewForceCancelOrdersInstructionBuilder().
		SetGreeksAccount(greeks).
		SetOracleAccount(oracle).
		SetCancelAccountsAccountsFromBuilder(
			NewForceCancelOrdersCancelAccountsAccountsBuilder().
				SetZetaGroupAccount(cancelAccountsZetaGroup).
				SetStateAccount(cancelAccountsState).
				SetMarginAccountAccount(cancelAccountsMarginAccount).
				SetDexProgramAccount(cancelAccountsDexProgram).
				SetSerumAuthorityAccount(cancelAccountsSerumAuthority).
				SetOpenOrdersAccount(cancelAccountsOpenOrders).
				SetMarketAccount(cancelAccountsMarket).
				SetBidsAccount(cancelAccountsBids).
				SetAsksAccount(cancelAccountsAsks).
				SetEventQueueAccount(cancelAccountsEventQueue),
		)
}
