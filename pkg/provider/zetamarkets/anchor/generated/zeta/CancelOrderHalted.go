// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package zeta

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CancelOrderHalted is the `cancelOrderHalted` instruction.
type CancelOrderHalted struct {
	Side    *Side
	OrderId *ag_binary.Uint128

	// ····· cancelAccounts: [0] = [] zetaGroup
	//
	// ····················· [1] = [] state
	//
	// ····················· [2] = [WRITE] marginAccount
	//
	// ····················· [3] = [] dexProgram
	//
	// ····················· [4] = [] serumAuthority
	//
	// ····················· [5] = [WRITE] openOrders
	//
	// ····················· [6] = [WRITE] market
	//
	// ····················· [7] = [WRITE] bids
	//
	// ····················· [8] = [WRITE] asks
	//
	// ····················· [9] = [WRITE] eventQueue
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCancelOrderHaltedInstructionBuilder creates a new `CancelOrderHalted` instruction builder.
func NewCancelOrderHaltedInstructionBuilder() *CancelOrderHalted {
	nd := &CancelOrderHalted{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetSide sets the "side" parameter.
func (inst *CancelOrderHalted) SetSide(side Side) *CancelOrderHalted {
	inst.Side = &side
	return inst
}

// SetOrderId sets the "orderId" parameter.
func (inst *CancelOrderHalted) SetOrderId(orderId ag_binary.Uint128) *CancelOrderHalted {
	inst.OrderId = &orderId
	return inst
}

type CancelOrderHaltedCancelAccountsAccountsBuilder struct {
	ag_solanago.AccountMetaSlice `bin:"-"`
}

func NewCancelOrderHaltedCancelAccountsAccountsBuilder() *CancelOrderHaltedCancelAccountsAccountsBuilder {
	return &CancelOrderHaltedCancelAccountsAccountsBuilder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
}

func (inst *CancelOrderHalted) SetCancelAccountsAccountsFromBuilder(cancelOrderHaltedCancelAccountsAccountsBuilder *CancelOrderHaltedCancelAccountsAccountsBuilder) *CancelOrderHalted {
	inst.AccountMetaSlice[0] = cancelOrderHaltedCancelAccountsAccountsBuilder.GetZetaGroupAccount()
	inst.AccountMetaSlice[1] = cancelOrderHaltedCancelAccountsAccountsBuilder.GetStateAccount()
	inst.AccountMetaSlice[2] = cancelOrderHaltedCancelAccountsAccountsBuilder.GetMarginAccountAccount()
	inst.AccountMetaSlice[3] = cancelOrderHaltedCancelAccountsAccountsBuilder.GetDexProgramAccount()
	inst.AccountMetaSlice[4] = cancelOrderHaltedCancelAccountsAccountsBuilder.GetSerumAuthorityAccount()
	inst.AccountMetaSlice[5] = cancelOrderHaltedCancelAccountsAccountsBuilder.GetOpenOrdersAccount()
	inst.AccountMetaSlice[6] = cancelOrderHaltedCancelAccountsAccountsBuilder.GetMarketAccount()
	inst.AccountMetaSlice[7] = cancelOrderHaltedCancelAccountsAccountsBuilder.GetBidsAccount()
	inst.AccountMetaSlice[8] = cancelOrderHaltedCancelAccountsAccountsBuilder.GetAsksAccount()
	inst.AccountMetaSlice[9] = cancelOrderHaltedCancelAccountsAccountsBuilder.GetEventQueueAccount()
	return inst
}

// SetZetaGroupAccount sets the "zetaGroup" account.
func (inst *CancelOrderHaltedCancelAccountsAccountsBuilder) SetZetaGroupAccount(zetaGroup ag_solanago.PublicKey) *CancelOrderHaltedCancelAccountsAccountsBuilder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(zetaGroup)
	return inst
}

// GetZetaGroupAccount gets the "zetaGroup" account.
func (inst *CancelOrderHaltedCancelAccountsAccountsBuilder) GetZetaGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStateAccount sets the "state" account.
func (inst *CancelOrderHaltedCancelAccountsAccountsBuilder) SetStateAccount(state ag_solanago.PublicKey) *CancelOrderHaltedCancelAccountsAccountsBuilder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *CancelOrderHaltedCancelAccountsAccountsBuilder) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMarginAccountAccount sets the "marginAccount" account.
func (inst *CancelOrderHaltedCancelAccountsAccountsBuilder) SetMarginAccountAccount(marginAccount ag_solanago.PublicKey) *CancelOrderHaltedCancelAccountsAccountsBuilder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(marginAccount).WRITE()
	return inst
}

// GetMarginAccountAccount gets the "marginAccount" account.
func (inst *CancelOrderHaltedCancelAccountsAccountsBuilder) GetMarginAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetDexProgramAccount sets the "dexProgram" account.
func (inst *CancelOrderHaltedCancelAccountsAccountsBuilder) SetDexProgramAccount(dexProgram ag_solanago.PublicKey) *CancelOrderHaltedCancelAccountsAccountsBuilder {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(dexProgram)
	return inst
}

// GetDexProgramAccount gets the "dexProgram" account.
func (inst *CancelOrderHaltedCancelAccountsAccountsBuilder) GetDexProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSerumAuthorityAccount sets the "serumAuthority" account.
func (inst *CancelOrderHaltedCancelAccountsAccountsBuilder) SetSerumAuthorityAccount(serumAuthority ag_solanago.PublicKey) *CancelOrderHaltedCancelAccountsAccountsBuilder {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(serumAuthority)
	return inst
}

// GetSerumAuthorityAccount gets the "serumAuthority" account.
func (inst *CancelOrderHaltedCancelAccountsAccountsBuilder) GetSerumAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetOpenOrdersAccount sets the "openOrders" account.
func (inst *CancelOrderHaltedCancelAccountsAccountsBuilder) SetOpenOrdersAccount(openOrders ag_solanago.PublicKey) *CancelOrderHaltedCancelAccountsAccountsBuilder {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(openOrders).WRITE()
	return inst
}

// GetOpenOrdersAccount gets the "openOrders" account.
func (inst *CancelOrderHaltedCancelAccountsAccountsBuilder) GetOpenOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetMarketAccount sets the "market" account.
func (inst *CancelOrderHaltedCancelAccountsAccountsBuilder) SetMarketAccount(market ag_solanago.PublicKey) *CancelOrderHaltedCancelAccountsAccountsBuilder {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(market).WRITE()
	return inst
}

// GetMarketAccount gets the "market" account.
func (inst *CancelOrderHaltedCancelAccountsAccountsBuilder) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetBidsAccount sets the "bids" account.
func (inst *CancelOrderHaltedCancelAccountsAccountsBuilder) SetBidsAccount(bids ag_solanago.PublicKey) *CancelOrderHaltedCancelAccountsAccountsBuilder {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(bids).WRITE()
	return inst
}

// GetBidsAccount gets the "bids" account.
func (inst *CancelOrderHaltedCancelAccountsAccountsBuilder) GetBidsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAsksAccount sets the "asks" account.
func (inst *CancelOrderHaltedCancelAccountsAccountsBuilder) SetAsksAccount(asks ag_solanago.PublicKey) *CancelOrderHaltedCancelAccountsAccountsBuilder {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(asks).WRITE()
	return inst
}

// GetAsksAccount gets the "asks" account.
func (inst *CancelOrderHaltedCancelAccountsAccountsBuilder) GetAsksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetEventQueueAccount sets the "eventQueue" account.
func (inst *CancelOrderHaltedCancelAccountsAccountsBuilder) SetEventQueueAccount(eventQueue ag_solanago.PublicKey) *CancelOrderHaltedCancelAccountsAccountsBuilder {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(eventQueue).WRITE()
	return inst
}

// GetEventQueueAccount gets the "eventQueue" account.
func (inst *CancelOrderHaltedCancelAccountsAccountsBuilder) GetEventQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst CancelOrderHalted) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CancelOrderHalted,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CancelOrderHalted) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CancelOrderHalted) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Side == nil {
			return errors.New("Side parameter is not set")
		}
		if inst.OrderId == nil {
			return errors.New("OrderId parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.CancelAccountsZetaGroup is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.CancelAccountsState is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.CancelAccountsMarginAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.CancelAccountsDexProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.CancelAccountsSerumAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.CancelAccountsOpenOrders is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.CancelAccountsMarket is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.CancelAccountsBids is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.CancelAccountsAsks is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.CancelAccountsEventQueue is not set")
		}
	}
	return nil
}

func (inst *CancelOrderHalted) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CancelOrderHalted")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("   Side", *inst.Side))
						paramsBranch.Child(ag_format.Param("OrderId", *inst.OrderId))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     cancelAccounts/zetaGroup", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         cancelAccounts/state", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        cancelAccounts/margin", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    cancelAccounts/dexProgram", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("cancelAccounts/serumAuthority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("    cancelAccounts/openOrders", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("        cancelAccounts/market", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("          cancelAccounts/bids", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("          cancelAccounts/asks", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("    cancelAccounts/eventQueue", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj CancelOrderHalted) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	// Serialize `OrderId` param:
	err = encoder.Encode(obj.OrderId)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CancelOrderHalted) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	// Deserialize `OrderId`:
	err = decoder.Decode(&obj.OrderId)
	if err != nil {
		return err
	}
	return nil
}

// NewCancelOrderHaltedInstruction declares a new CancelOrderHalted instruction with the provided parameters and accounts.
func NewCancelOrderHaltedInstruction(
	// Parameters:
	side Side,
	orderId ag_binary.Uint128,
	// Accounts:
	cancelAccountsZetaGroup ag_solanago.PublicKey,
	cancelAccountsState ag_solanago.PublicKey,
	cancelAccountsMarginAccount ag_solanago.PublicKey,
	cancelAccountsDexProgram ag_solanago.PublicKey,
	cancelAccountsSerumAuthority ag_solanago.PublicKey,
	cancelAccountsOpenOrders ag_solanago.PublicKey,
	cancelAccountsMarket ag_solanago.PublicKey,
	cancelAccountsBids ag_solanago.PublicKey,
	cancelAccountsAsks ag_solanago.PublicKey,
	cancelAccountsEventQueue ag_solanago.PublicKey) *CancelOrderHalted {
	return NewCancelOrderHaltedInstructionBuilder().
		SetSide(side).
		SetOrderId(orderId).
		SetCancelAccountsAccountsFromBuilder(
			NewCancelOrderHaltedCancelAccountsAccountsBuilder().
				SetZetaGroupAccount(cancelAccountsZetaGroup).
				SetStateAccount(cancelAccountsState).
				SetMarginAccountAccount(cancelAccountsMarginAccount).
				SetDexProgramAccount(cancelAccountsDexProgram).
				SetSerumAuthorityAccount(cancelAccountsSerumAuthority).
				SetOpenOrdersAccount(cancelAccountsOpenOrders).
				SetMarketAccount(cancelAccountsMarket).
				SetBidsAccount(cancelAccountsBids).
				SetAsksAccount(cancelAccountsAsks).
				SetEventQueueAccount(cancelAccountsEventQueue),
		)
}
